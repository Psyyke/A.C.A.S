//
// https://github.com/op12no2/lozza
//

const BUILD = "5";

const net_weights_file = 'quantised.bin';

const net_quantise_a  = 255;
const net_quantise_b  = 64;
const net_quantise_ab = net_quantise_a * net_quantise_b;
const net_scale       = 100 * 1.6;
const net_i_size      = 768;
const net_h1_size     = 128;

//{{{  history
/* new to old

- Add network (n) command showing network info and stats.
- Add a serialise command.
- Use performance.now() | 0.
- +32 at LTC v Lozza4.
- Apply a fudge factor to eval to match previous magic numbers.
- Fix board.fen() WRT black queen castling rights.
- Optimise accessing 'them' weights a bit more.
- Use an Int16Array quantised net.
- Use bullet trainer.
- Use performance.now() not Date.now().

*/

//}}}

//{{{  globals

var SILENT     = 0;
var RANDOMEVAL = 0;

//}}}
//{{{  detect host

const HOST_WEB     = 0;
const HOST_NODEJS  = 1;
const HOST_CONSOLE = 2;
const HOSTS        = ['Web','Node','Console'];

var lozzaHost = HOST_WEB;

if ((typeof process) != 'undefined') {
  lozzaHost = HOST_NODEJS;
}

else if ((typeof WorkerGlobalScope) == 'undefined') {
  lozzaHost = HOST_CONSOLE;
}

//}}}
//{{{  dev/release
//
// + Comment out RANDOMEVAL stuff in board.evaluate().
// + Serialise, plonk fold in board.netInitWeights(), set net_weights_file string to ''.
//

const TTSIZE      = 1 << 23;
const bench_depth = 9;

//}}}
//{{{  constants

const IMAP = Array(16);

const MATERIAL = [0,100,394,388,588,1207,10000];
const ADJACENT = [1,1,0,0,0,0,0,0,0,0,0,1,1,1];

var MAX_PLY         = 100;                // limited by lozza.board.ttDepth bits
var MAX_MOVES       = 250;
var INFINITY        = 30000;              // limited by lozza.board.ttScore bits
var MATE            = 20000;
var MINMATE         = MATE - 2*MAX_PLY;
var INCHECK_UNKNOWN = MATE + 1;
var TTSCORE_UNKNOWN = MATE + 2;
var EMPTY           = 0;
var UCI_FMT         = 0;
var SAN_FMT         = 1;

var WHITE   = 0x0;                // toggle with: ~turn & COLOR_MASK
var BLACK   = 0x8;
var I_WHITE = 0;                  // 0/1 colour index, compute with: turn >>> 3
var I_BLACK = 1;
var M_WHITE = 1;
var M_BLACK = -1;                 // +1/-1 colour multiplier, compute with: (-turn >> 31) | 1

var PIECE_MASK = 0x7;
var COLOR_MASK = 0x8;
var COLOUR_MASK = 0x8;

const TTMASK = TTSIZE - 1;

var TT_EMPTY  = 0;
var TT_EXACT  = 1;
var TT_BETA   = 2;
var TT_ALPHA  = 3;

//                                      killer?

var BASE_HASH       =  40000012000;  // no
var BASE_PROMOTES   =  40000011000;  // no
var BASE_GOODTAKES  =  40000010000;  // no
var BASE_EVENTAKES  =  40000009000;  // no
var BASE_EPTAKES    =  40000008000;  // no
var BASE_MATEKILLER =  40000007000;
var BASE_MYKILLERS  =  40000006000;
var BASE_GPKILLERS  =  40000005000;
var BASE_CASTLING   =  40000004000;  // yes
var BASE_BADTAKES   =  40000003000;  // yes
var BASE_HISSLIDE   =  20000002000;  // yes
var BASE_PSTSLIDE   =         1000;  // yes

var BASE_LMR = BASE_BADTAKES;

var MOVE_TO_BITS      = 0;
var MOVE_FR_BITS      = 8;
var MOVE_TOOBJ_BITS   = 16;
var MOVE_FROBJ_BITS   = 20;
var MOVE_PROMAS_BITS  = 29;

var MOVE_TO_MASK       = 0x000000FF;
var MOVE_FR_MASK       = 0x0000FF00;
var MOVE_TOOBJ_MASK    = 0x000F0000;
var MOVE_FROBJ_MASK    = 0x00F00000;
var MOVE_PAWN_MASK     = 0x01000000;
var MOVE_EPTAKE_MASK   = 0x02000000;
var MOVE_EPMAKE_MASK   = 0x04000000;
var MOVE_CASTLE_MASK   = 0x08000000;
var MOVE_PROMOTE_MASK  = 0x10000000;
var MOVE_PROMAS_MASK   = 0x60000000;  // NBRQ
var MOVE_LEGAL_MASK    = 0x80000000;

var MOVE_CLEAN_MASK    = ~MOVE_LEGAL_MASK & 0xFFFFFFFF;
var MOVE_SPECIAL_MASK  = MOVE_CASTLE_MASK | MOVE_PROMOTE_MASK | MOVE_EPTAKE_MASK | MOVE_EPMAKE_MASK; // need extra work in make move
var KEEPER_MASK        = MOVE_CASTLE_MASK | MOVE_PROMOTE_MASK | MOVE_EPTAKE_MASK | MOVE_TOOBJ_MASK;  // futility etc
var MOVE_NOISY_MASK    = MOVE_TOOBJ_MASK | MOVE_EPTAKE_MASK;

var NULL   = 0;
var PAWN   = 1;
var KNIGHT = 2;
var BISHOP = 3;
var ROOK   = 4;
var QUEEN  = 5;
var KING   = 6;
var EDGE   = 7;
var NO_Z   = 8;

var W_PAWN   = PAWN;
var W_KNIGHT = KNIGHT;
var W_BISHOP = BISHOP;
var W_ROOK   = ROOK;
var W_QUEEN  = QUEEN;
var W_KING   = KING;

var B_PAWN   = PAWN   | BLACK;
var B_KNIGHT = KNIGHT | BLACK;
var B_BISHOP = BISHOP | BLACK;
var B_ROOK   = ROOK   | BLACK;
var B_QUEEN  = QUEEN  | BLACK;
var B_KING   = KING   | BLACK;

//
// E == EMPTY, X = OFF BOARD, - == CANNOT HAPPEN
//
//               0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15
//               E  W  W  W  W  W  W  X  -  B  B  B  B  B  B  -
//               E  P  N  B  R  Q  K  X  -  P  N  B  R  Q  K  -
//

var IS_O      = [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0];
var IS_E      = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var IS_OE     = [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0];

var IS_P      = [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0];
var IS_N      = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];
var IS_NBRQKE = [1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0];
var IS_RQKE   = [1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0];
var IS_QKE    = [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0];
var IS_K      = [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0];
var IS_KN     = [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0];

var IS_W      = [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var IS_WNK    = [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var IS_WE     = [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var IS_WP     = [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var IS_WN     = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var IS_WNBRQ  = [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var IS_WB     = [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var IS_WBQ    = [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var IS_WRQ    = [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var IS_WQ     = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

var IS_B      = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0];
var IS_BNK    = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0];
var IS_BE     = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0];
var IS_BP     = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0];
var IS_BN     = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];
var IS_BNBRQ  = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0];
var IS_BB     = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0];
var IS_BBQ    = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0];
var IS_BRQ    = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0];
var IS_BQ     = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0];

var PPHASE = 0;
var NPHASE = 1;
var BPHASE = 1;
var RPHASE = 2;
var QPHASE = 4;
var VPHASE = [0,PPHASE,NPHASE,BPHASE,RPHASE,QPHASE,0];
var TPHASE = PPHASE*16 + NPHASE*4 + BPHASE*4 + RPHASE*4 + QPHASE*2;
var EPHASE = 16;  // don't do QS futility after this

var W_PROMOTE_SQ = [0,26, 27, 28, 29, 30, 31, 32, 33];
var B_PROMOTE_SQ = [0,110,111,112,113,114,115,116,117];

var A1 = 110, B1 = 111, C1 = 112, D1 = 113, E1 = 114, F1 = 115, G1 = 116, H1 = 117;
var A8 = 26,  B8 = 27,  C8 = 28,  D8 = 29,  E8 = 30,  F8 = 31,  G8 = 32,  H8 = 33;

var SQA1 = 110, SQB1 = 111, SQC1 = 112, SQD1 = 113, SQE1 = 114, SQF1 = 115, SQG1 = 116, SQH1 = 117;
var SQA2 = 98,  SQB2 = 99,  SQC2 = 100, SQD2 = 101, SQE2 = 102, SQF2 = 103, SQG2 = 104, SQH2 = 105;
var SQA3 = 86,  SQB3 = 87,  SQC3 = 88,  SQD3 = 89,  SQE3 = 90,  SQF3 = 91,  SQG3 = 92,  SQH3 = 93;
var SQA4 = 74,  SQB4 = 75,  SQC4 = 76,  SQD4 = 77,  SQE4 = 78,  SQF4 = 79,  SQG4 = 80,  SQH4 = 81;
var SQA5 = 62,  SQB5 = 63,  SQC5 = 64,  SQD5 = 65,  SQE5 = 66,  SQF5 = 67,  SQG5 = 68,  SQH5 = 69;
var SQA6 = 50,  SQB6 = 51,  SQC6 = 52,  SQD6 = 53,  SQE6 = 54,  SQF6 = 55,  SQG6 = 56,  SQH6 = 57;
var SQA7 = 38,  SQB7 = 39,  SQC7 = 40,  SQD7 = 41,  SQE7 = 42,  SQF7 = 43,  SQG7 = 44,  SQH7 = 45;
var SQA8 = 26,  SQB8 = 27,  SQC8 = 28,  SQD8 = 29,  SQE8 = 30,  SQF8 = 31,  SQG8 = 32,  SQH8 = 33;

var MOVE_E1G1 = MOVE_CASTLE_MASK | (W_KING << MOVE_FROBJ_BITS) | (E1 << MOVE_FR_BITS) | G1;
var MOVE_E1C1 = MOVE_CASTLE_MASK | (W_KING << MOVE_FROBJ_BITS) | (E1 << MOVE_FR_BITS) | C1;
var MOVE_E8G8 = MOVE_CASTLE_MASK | (B_KING << MOVE_FROBJ_BITS) | (E8 << MOVE_FR_BITS) | G8;
var MOVE_E8C8 = MOVE_CASTLE_MASK | (B_KING << MOVE_FROBJ_BITS) | (E8 << MOVE_FR_BITS) | C8;

var QPRO = (QUEEN-2)  << MOVE_PROMAS_BITS | MOVE_PROMOTE_MASK;
var RPRO = (ROOK-2)   << MOVE_PROMAS_BITS | MOVE_PROMOTE_MASK;
var BPRO = (BISHOP-2) << MOVE_PROMAS_BITS | MOVE_PROMOTE_MASK;
var NPRO = (KNIGHT-2) << MOVE_PROMAS_BITS | MOVE_PROMOTE_MASK;

var WHITE_RIGHTS_KING  = 0x00000001;
var WHITE_RIGHTS_QUEEN = 0x00000002;
var BLACK_RIGHTS_KING  = 0x00000004;
var BLACK_RIGHTS_QUEEN = 0x00000008;
var WHITE_RIGHTS       = WHITE_RIGHTS_QUEEN | WHITE_RIGHTS_KING;
var BLACK_RIGHTS       = BLACK_RIGHTS_QUEEN | BLACK_RIGHTS_KING;

var  MASK_RIGHTS =  [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                     15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                     15, 15, ~8, 15, 15, 15, ~12,15, 15, ~4, 15, 15,
                     15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                     15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                     15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                     15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                     15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                     15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                     15, 15, ~2, 15, 15, 15, ~3, 15, 15, ~1, 15, 15,
                     15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
                     15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15];

var WP_OFFSET_ORTH  = -12;
var WP_OFFSET_DIAG1 = -13;
var WP_OFFSET_DIAG2 = -11;

var BP_OFFSET_ORTH  = 12;
var BP_OFFSET_DIAG1 = 13;
var BP_OFFSET_DIAG2 = 11;

var WB_OFFSET_DIAG1 = [WP_OFFSET_DIAG1,BP_OFFSET_DIAG1];
var WB_OFFSET_DIAG2 = [WP_OFFSET_DIAG2,BP_OFFSET_DIAG2];

var KNIGHT_OFFSETS  = [25,-25,23,-23,14,-14,10,-10];
var BISHOP_OFFSETS  = [11,-11,13,-13];
var ROOK_OFFSETS    =               [1,-1,12,-12];
var QUEEN_OFFSETS   = [11,-11,13,-13,1,-1,12,-12];
var KING_OFFSETS    = [11,-11,13,-13,1,-1,12,-12];

var OFFSETS = [0,0,KNIGHT_OFFSETS,BISHOP_OFFSETS,ROOK_OFFSETS,QUEEN_OFFSETS,KING_OFFSETS];
var LIMITS  = [0,1,1,             8,             8,           8,            1];

var RANK_VECTOR  = [0,1,2,2,4,5,6];  // for move sorting

var  B88 =  [26, 27, 28, 29, 30, 31, 32, 33,
             38, 39, 40, 41, 42, 43, 44, 45,
             50, 51, 52, 53, 54, 55, 56, 57,
             62, 63, 64, 65, 66, 67, 68, 69,
             74, 75, 76, 77, 78, 79, 80, 81,
             86, 87, 88, 89, 90, 91, 92, 93,
             98, 99, 100,101,102,103,104,105,
             110,111,112,113,114,115,116,117];

var COORDS = ['??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??',
              '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??',
              '??', '??', 'a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8', '??', '??',
              '??', '??', 'a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7', '??', '??',
              '??', '??', 'a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6', '??', '??',
              '??', '??', 'a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5', '??', '??',
              '??', '??', 'a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4', '??', '??',
              '??', '??', 'a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3', '??', '??',
              '??', '??', 'a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2', '??', '??',
              '??', '??', 'a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1', '??', '??',
              '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??',
              '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??', '??'];

var NAMES    = ['-','P','N','B','R','Q','K','-'];
var PROMOTES = ['n','b','r','q'];                  // 0-3 encoded in move

const CENTRE = [0, 0, 0, 0,  0,  0,  0,  0,  0,  0, 0, 0,
                0, 0, 0, 0,  0,  0,  0,  0,  0,  0, 0, 0,
                0, 0, 1, 2,  3,  4,  4,  3,  2,  1, 0, 0,
                0, 0, 2, 6,  8,  10, 10, 8,  6,  2, 0, 0,
                0, 0, 3, 8,  15, 18, 18, 15, 8,  3, 0, 0,
                0, 0, 4, 10, 18, 28, 28, 18, 10, 4, 0, 0,
                0, 0, 4, 10, 18, 28, 28, 19, 10, 4, 0, 0,
                0, 0, 3, 8,  15, 18, 18, 15, 8,  3, 0, 0,
                0, 0, 2, 6,  8,  10, 10, 8,  6,  2, 0, 0,
                0, 0, 1, 2,  3,  4,  4,  3,  2,  1, 0, 0,
                0, 0, 0, 0,  0,  0,  0,  0,  0,  0, 0, 0,
                0, 0, 0, 0,  0,  0,  0,  0,  0,  0, 0, 0];

var RANK = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0,
            0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0,
            0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0,
            0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0,
            0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0,
            0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0,
            0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0,
            0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

var FILE = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
            0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
            0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
            0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
            0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
            0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
            0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
            0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

var CORNERS = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

var WSQUARE = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0,
               0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
               0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0,
               0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
               0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0,
               0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
               0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0,
               0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

var BSQUARE = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
               0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0,
               0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
               0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0,
               0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
               0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0,
               0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
               0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

var NULL_PST = Array(144).fill(0);

var MAP = [];

MAP['p'] = B_PAWN;
MAP['n'] = B_KNIGHT;
MAP['b'] = B_BISHOP;
MAP['r'] = B_ROOK;
MAP['q'] = B_QUEEN;
MAP['k'] = B_KING;
MAP['P'] = W_PAWN;
MAP['N'] = W_KNIGHT;
MAP['B'] = W_BISHOP;
MAP['R'] = W_ROOK;
MAP['Q'] = W_QUEEN;
MAP['K'] = W_KING;

var UMAP = [];

UMAP[B_PAWN]   = 'p';
UMAP[B_KNIGHT] = 'n';
UMAP[B_BISHOP] = 'b';
UMAP[B_ROOK]   = 'r';
UMAP[B_QUEEN]  = 'q';
UMAP[B_KING]   = 'k';
UMAP[W_PAWN]   = 'P';
UMAP[W_KNIGHT] = 'N';
UMAP[W_BISHOP] = 'B';
UMAP[W_ROOK]   = 'R';
UMAP[W_QUEEN]  = 'Q';
UMAP[W_KING]   = 'K';

var STARRAY = Array(144);

//{{{  ALIGNED

const ALIGNED = [
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,12,0,0,0,13,0,0,0,7,7,7,7,12,0,0,0,0,13,0,0,7,7,7,7,12,0,0,0,0,0,13,0,7,7,7,7,12,0,0,0,0,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,0,12,0,0,0,13,0,0,7,7,7,7,0,12,0,0,0,0,13,0,7,7,7,7,0,12,0,0,0,0,0,13,7,7,7,7,0,12,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,0,0,12,0,0,0,13,0,7,7,7,7,0,0,12,0,0,0,0,13,7,7,7,7,0,0,12,0,0,0,0,0,7,7,7,7,0,0,12,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,0,0,0,12,0,0,0,13,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,11,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,0,11,0,0,0,12,0,0,7,7,7,7,11,0,0,0,0,12,0,0,7,7,7,7,0,0,0,0,0,12,0,0,7,7,7,7,0,0,0,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,0,0,11,0,0,0,12,0,7,7,7,7,0,11,0,0,0,0,12,0,7,7,7,7,11,0,0,0,0,0,12,0,7,7,7,7,0,0,0,0,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,0,0,0,11,0,0,0,12,7,7,7,7,0,0,11,0,0,0,0,12,7,7,7,7,0,11,0,0,0,0,0,12,7,7,7,7,11,0,0,0,0,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,12,0,0,0,13,0,0,0,7,7,7,7,12,0,0,0,0,13,0,0,7,7,7,7,12,0,0,0,0,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,0,12,0,0,0,13,0,0,7,7,7,7,0,12,0,0,0,0,13,0,7,7,7,7,0,12,0,0,0,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,0,0,12,0,0,0,13,0,7,7,7,7,0,0,12,0,0,0,0,13,7,7,7,7,0,0,12,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,0,0,0,12,0,0,0,13,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,11,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,0,11,0,0,0,12,0,0,7,7,7,7,11,0,0,0,0,12,0,0,7,7,7,7,0,0,0,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,0,0,11,0,0,0,12,0,7,7,7,7,0,11,0,0,0,0,12,0,7,7,7,7,11,0,0,0,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,0,0,0,11,0,0,0,12,7,7,7,7,0,0,11,0,0,0,0,12,7,7,7,7,0,11,0,0,0,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,12,0,0,0,13,0,0,0,7,7,7,7,12,0,0,0,0,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,0,12,0,0,0,13,0,0,7,7,7,7,0,12,0,0,0,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,0,0,12,0,0,0,13,0,7,7,7,7,0,0,12,0,0,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,0,0,0,12,0,0,0,13,7,7,7,7,0,0,0,12,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,11,0,0,0,12,0,0,0,7,7,7,7,0,0,0,0,12,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,0,11,0,0,0,12,0,0,7,7,7,7,11,0,0,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,0,0,11,0,0,0,12,0,7,7,7,7,0,11,0,0,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,0,0,0,11,0,0,0,12,7,7,7,7,0,0,11,0,0,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,12,0,0,0,13,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,0,12,0,0,0,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,0,0,12,0,0,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,0,0,0,12,0,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,11,0,0,0,12,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,0,11,0,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,0,0,11,0,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,0,0,0,11,0,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,0,-11,0,0,0,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,12,0,0,13,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,0,-11,0,0,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,0,12,0,0,13,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,0,-11,0,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,0,0,12,0,0,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-12,0,0,0,-11,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,11,0,0,12,0,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,0,-12,0,0,0,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,0,11,0,0,12,0,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,0,0,-12,0,0,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,0,0,11,0,0,12,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,0,0,0,-12,0,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,0,0,0,11,0,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-13,0,0,0,-12,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,0,0,0,0,11,0,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,0,0,-11,0,0,7,7,7,7,-12,0,0,0,-11,0,0,0,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,12,0,13,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,0,0,-11,0,7,7,7,7,0,-12,0,0,0,-11,0,0,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,0,12,0,13,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,0,0,-11,7,7,7,7,0,0,-12,0,0,0,-11,0,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,11,0,12,0,13,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,-11,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,0,11,0,12,0,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,-13,0,0,0,-12,0,0,0,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,0,0,11,0,12,0,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,0,0,-12,0,0,7,7,7,7,0,-13,0,0,0,-12,0,0,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,0,0,0,11,0,12,0,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,0,0,0,-12,0,7,7,7,7,0,0,-13,0,0,0,-12,0,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,0,0,0,0,11,0,12,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-13,0,0,0,0,-12,7,7,7,7,0,0,0,-13,0,0,0,-12,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,0,0,0,0,0,11,0,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,0,0,0,-11,0,7,7,7,7,-12,0,0,0,0,-11,0,0,7,7,7,7,-12,0,0,0,-11,0,0,0,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,12,13,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,0,0,0,-11,7,7,7,7,0,-12,0,0,0,0,-11,0,7,7,7,7,0,-12,0,0,0,-11,0,0,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,11,12,13,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,0,0,0,7,7,7,7,0,0,-12,0,0,0,0,-11,7,7,7,7,0,0,-12,0,0,0,-11,0,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,0,11,12,13,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,-11,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,0,0,11,12,13,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,-13,0,0,0,-12,0,0,0,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,0,0,0,11,12,13,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,-12,0,0,7,7,7,7,-13,0,0,0,0,-12,0,0,7,7,7,7,0,-13,0,0,0,-12,0,0,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,0,0,0,0,11,12,13,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,0,0,0,-12,0,7,7,7,7,0,-13,0,0,0,0,-12,0,7,7,7,7,0,0,-13,0,0,0,-12,0,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,0,0,0,0,0,11,12,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-13,0,0,0,0,0,-12,7,7,7,7,0,0,-13,0,0,0,0,-12,7,7,7,7,0,0,0,-13,0,0,0,-12,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,0,0,0,0,0,0,11,12,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-12,0,0,0,0,0,0,-11,7,7,7,7,-12,0,0,0,0,0,-11,0,7,7,7,7,-12,0,0,0,0,-11,0,0,7,7,7,7,-12,0,0,0,-11,0,0,0,7,7,7,7,-12,0,0,-11,0,0,0,0,7,7,7,7,-12,0,-11,0,0,0,0,0,7,7,7,7,-12,-11,0,0,0,0,0,0,7,7,7,7,0,1,1,1,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,-12,0,0,0,0,0,0,7,7,7,7,0,-12,0,0,0,0,0,-11,7,7,7,7,0,-12,0,0,0,0,-11,0,7,7,7,7,0,-12,0,0,0,-11,0,0,7,7,7,7,0,-12,0,0,-11,0,0,0,7,7,7,7,0,-12,0,-11,0,0,0,0,7,7,7,7,-13,-12,-11,0,0,0,0,0,7,7,7,7,-1,0,1,1,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,-12,0,0,0,0,0,7,7,7,7,0,0,-12,0,0,0,0,0,7,7,7,7,0,0,-12,0,0,0,0,-11,7,7,7,7,0,0,-12,0,0,0,-11,0,7,7,7,7,0,0,-12,0,0,-11,0,0,7,7,7,7,-13,0,-12,0,-11,0,0,0,7,7,7,7,0,-13,-12,-11,0,0,0,0,7,7,7,7,-1,-1,0,1,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,0,7,7,7,7,0,0,0,-12,0,0,0,-11,7,7,7,7,-13,0,0,-12,0,0,-11,0,7,7,7,7,0,-13,0,-12,0,-11,0,0,7,7,7,7,0,0,-13,-12,-11,0,0,0,7,7,7,7,-1,-1,-1,0,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,0,0,0,0,-12,0,0,0,7,7,7,7,-13,0,0,0,-12,0,0,0,7,7,7,7,0,-13,0,0,-12,0,0,-11,7,7,7,7,0,0,-13,0,-12,0,-11,0,7,7,7,7,0,0,0,-13,-12,-11,0,0,7,7,7,7,-1,-1,-1,-1,0,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,-12,0,0,7,7,7,7,0,0,0,0,0,-12,0,0,7,7,7,7,-13,0,0,0,0,-12,0,0,7,7,7,7,0,-13,0,0,0,-12,0,0,7,7,7,7,0,0,-13,0,0,-12,0,0,7,7,7,7,0,0,0,-13,0,-12,0,-11,7,7,7,7,0,0,0,0,-13,-12,-11,0,7,7,7,7,-1,-1,-1,-1,-1,0,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,-12,0,7,7,7,7,-13,0,0,0,0,0,-12,0,7,7,7,7,0,-13,0,0,0,0,-12,0,7,7,7,7,0,0,-13,0,0,0,-12,0,7,7,7,7,0,0,0,-13,0,0,-12,0,7,7,7,7,0,0,0,0,-13,0,-12,0,7,7,7,7,0,0,0,0,0,-13,-12,-11,7,7,7,7,-1,-1,-1,-1,-1,-1,0,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-13,0,0,0,0,0,0,-12,7,7,7,7,0,-13,0,0,0,0,0,-12,7,7,7,7,0,0,-13,0,0,0,0,-12,7,7,7,7,0,0,0,-13,0,0,0,-12,7,7,7,7,0,0,0,0,-13,0,0,-12,7,7,7,7,0,0,0,0,0,-13,0,-12,7,7,7,7,0,0,0,0,0,0,-13,-12,7,7,7,7,-1,-1,-1,-1,-1,-1,-1,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
  [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]
];

//}}}
//{{{  PSTs

const WPAWN_PSTS = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,  -37,   45,  -27,   38,   70,  146,  -45,  -98,    0,    0,
     0,    0,  -94,  -95,  -81,  -87,  -34,   -9,  -46, -102,    0,    0,
     0,    0, -111,  -89, -102,  -78,  -82,  -82,  -84, -120,    0,    0,
     0,    0, -124, -123, -100,  -90,  -91,  -84, -109, -130,    0,    0,
     0,    0, -121, -126, -109, -106, -107,  -84,  -82, -110,    0,    0,
     0,    0, -124, -111, -125, -110, -124,  -74,  -71, -118,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const WPAWN_PSTE = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    1,    2,   27,    8,   19,  -32,   32,   38,    0,    0,
     0,    0,    8,   10,    7,   -2,  -16,  -16,    4,   11,    0,    0,
     0,    0,   -4,  -17,  -22,  -37,  -30,  -25,  -16,  -10,    0,    0,
     0,    0,  -10,  -14,  -29,  -34,  -30,  -33,  -25,  -20,    0,    0,
     0,    0,  -24,  -23,  -28,  -26,  -20,  -28,  -37,  -31,    0,    0,
     0,    0,  -16,  -24,   -8,  -19,   -1,  -21,  -33,  -31,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const WKNIGHT_PSTS = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0, -193, -137,  -73,  -78,   34, -127, -103, -105,    0,    0,
     0,    0, -114,  -76,   42,    2,    6,   29,  -14,  -61,    0,    0,
     0,    0,  -61,  -38,  -25,  -10,  -14,   96,    4,   47,    0,    0,
     0,    0,   -1,   26,    4,   35,   38,   61,   29,   29,    0,    0,
     0,    0,    4,   22,   21,   16,   37,   31,   29,    5,    0,    0,
     0,    0,   -2,    9,   30,   41,   53,   43,   48,    7,    0,    0,
     0,    0,   -7,  -31,   13,   28,   33,   37,   19,   12,    0,    0,
     0,    0, -102,    6,  -29,  -10,   29,    2,    6,   -1,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const WKNIGHT_PSTE = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,  -65,  -52,  -13,  -35,  -40,  -34,  -64, -123,    0,    0,
     0,    0,  -38,  -17,  -30,    6,  -11,  -29,  -41,  -72,    0,    0,
     0,    0,  -41,  -20,   14,   18,   -4,  -13,  -27,  -67,    0,    0,
     0,    0,  -37,   -9,   23,   20,   25,    2,  -19,  -41,    0,    0,
     0,    0,  -40,  -26,   13,   21,   12,   12,   -7,  -40,    0,    0,
     0,    0,  -55,  -15,   -8,    6,    6,  -13,  -37,  -47,    0,    0,
     0,    0,  -72,  -41,  -27,  -24,  -22,  -35,  -49,  -75,    0,    0,
     0,    0,  -57,  -78,  -49,  -42,  -55,  -46,  -79, -109,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const WBISHOP_PSTS = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,  -37,   -9, -166, -112,  -66,  -71,  -17,  -12,    0,    0,
     0,    0,  -37,  -21,  -47,  -55,   -4,   24,    3,  -74,    0,    0,
     0,    0,  -14,   29,   23,    6,   15,   42,   30,    4,    0,    0,
     0,    0,    3,    5,    4,   39,   16,   18,    1,    4,    0,    0,
     0,    0,    2,   16,   13,   27,   31,    9,   14,   11,    0,    0,
     0,    0,   10,   29,   26,   24,   34,   47,   38,   25,    0,    0,
     0,    0,   21,   31,   27,   24,   25,   41,   62,   22,    0,    0,
     0,    0,  -20,   27,   26,   19,   24,   22,  -12,    5,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const WBISHOP_PSTE = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,  -34,  -43,  -14,  -16,  -16,  -22,  -34,  -47,    0,    0,
     0,    0,  -24,  -24,  -15,  -24,  -22,  -30,  -22,  -30,    0,    0,
     0,    0,  -23,  -32,  -28,  -27,  -27,  -29,  -28,  -23,    0,    0,
     0,    0,  -31,  -20,  -17,  -21,  -14,  -23,  -26,  -25,    0,    0,
     0,    0,  -34,  -30,  -18,  -15,  -29,  -21,  -34,  -35,    0,    0,
     0,    0,  -39,  -34,  -25,  -24,  -21,  -34,  -36,  -40,    0,    0,
     0,    0,  -47,  -47,  -41,  -37,  -29,  -43,  -49,  -58,    0,    0,
     0,    0,  -52,  -40,  -52,  -38,  -41,  -43,  -35,  -44,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const WROOK_PSTS = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    2,   20,  -20,   41,   39,  -31,  -27,    5,    0,    0,
     0,    0,   22,   28,   64,   68,   79,   86,   11,   48,    0,    0,
     0,    0,  -30,  -13,  -13,   -9,  -34,    7,   59,  -13,    0,    0,
     0,    0,  -45,  -39,  -15,    1,  -14,   12,  -29,  -39,    0,    0,
     0,    0,  -48,  -46,  -30,  -20,  -10,  -12,    5,  -36,    0,    0,
     0,    0,  -40,  -25,  -14,  -18,    0,    6,   -1,  -27,    0,    0,
     0,    0,  -34,  -14,  -17,   -2,    7,   16,   -2,  -57,    0,    0,
     0,    0,   -6,   -5,    1,   13,   13,   21,  -24,    2,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const WROOK_PSTE = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,   42,   33,   49,   31,   33,   47,   44,   36,    0,    0,
     0,    0,   23,   21,   12,   10,   -3,    5,   27,   16,    0,    0,
     0,    0,   40,   40,   37,   38,   39,   25,   15,   25,    0,    0,
     0,    0,   40,   36,   42,   26,   31,   29,   28,   37,    0,    0,
     0,    0,   34,   39,   37,   28,   19,   18,   14,   21,    0,    0,
     0,    0,   23,   24,   14,   19,    9,    5,   12,    9,    0,    0,
     0,    0,   15,   13,   17,   15,    3,    1,    3,   19,    0,    0,
     0,    0,   11,   17,   19,   11,    9,    4,   17,  -14,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const WQUEEN_PSTS = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,  -26,  -30,   12,    5,  133,  102,   82,   53,    0,    0,
     0,    0,   88,   51,   91,   94,   56,  149,  128,  156,    0,    0,
     0,    0,  -11,  -21,    6,  -30,   23,   74,   51,   63,    0,    0,
     0,    0,  -43,  -34,  -30,  -34,  -17,   -7,  -14,  -11,    0,    0,
     0,    0,   -5,  -44,  -14,  -23,  -10,   -9,  -13,  -10,    0,    0,
     0,    0,  -21,   11,   -6,    6,    1,    0,    8,    5,    0,    0,
     0,    0,  -20,    6,   21,   20,   30,   34,   15,   23,    0,    0,
     0,    0,    6,    9,    9,   28,    8,   -6,   -5,  -37,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const WQUEEN_PSTE = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,  -28,   24,    7,   10,  -43,  -32,  -41,   14,    0,    0,
     0,    0, -101,  -63,  -53,  -31,   -1,  -57,  -53,  -73,    0,    0,
     0,    0,  -37,  -15,  -29,   47,   34,    2,   12,   -8,    0,    0,
     0,    0,   11,    3,    4,   26,   43,   31,   67,   52,    0,    0,
     0,    0,  -42,   16,   -8,   25,   -3,   12,   29,   24,    0,    0,
     0,    0,  -18,  -69,  -17,  -36,  -24,   -3,    1,   11,    0,    0,
     0,    0,  -43,  -64,  -66,  -58,  -61,  -61,  -74,  -53,    0,    0,
     0,    0,  -62,  -78,  -60,  -77,  -34,  -52,  -55,  -69,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const WKING_PSTS = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0, -228,  108,  154,  -16, -193, -174,   13,   24,    0,    0,
     0,    0,  152,   56,   22,  111,   15,   52,  -12, -182,    0,    0,
     0,    0,   59,   64,   98,  -35,   33,   64,  133,  -36,    0,    0,
     0,    0,  -45,  -22,    7,  -41,  -63,  -53,  -26,  -98,    0,    0,
     0,    0,  -65,   34,  -35, -102, -109,  -58,  -61,  -97,    0,    0,
     0,    0,    6,   23,    3,  -25,  -31,  -21,   13,  -16,    0,    0,
     0,    0,   38,   64,   28,  -20,   -4,   10,   58,   51,    0,    0,
     0,    0,    4,   71,   57,  -36,   42,   -4,   62,   42,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const WKING_PSTE = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0, -105,  -78,  -63,  -50,   -4,   25,  -28,  -44,    0,    0,
     0,    0,  -55,  -20,  -11,  -20,   -1,   14,    3,   24,    0,    0,
     0,    0,  -19,   -9,  -15,    5,   -2,   32,   17,    5,    0,    0,
     0,    0,  -12,    6,    8,   13,   17,   26,   20,    5,    0,    0,
     0,    0,  -28,  -28,    7,   19,   24,   13,    3,  -11,    0,    0,
     0,    0,  -36,  -25,  -10,    0,    4,   -1,  -13,  -23,    0,    0,
     0,    0,  -57,  -44,  -22,  -15,  -11,  -17,  -34,  -47,    0,    0,
     0,    0,  -85,  -70,  -55,  -33,  -57,  -33,  -57,  -79,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const BPAWN_PSTS = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0, -124, -111, -125, -110, -124,  -74,  -71, -118,    0,    0,
     0,    0, -121, -126, -109, -106, -107,  -84,  -82, -110,    0,    0,
     0,    0, -124, -123, -100,  -90,  -91,  -84, -109, -130,    0,    0,
     0,    0, -111,  -89, -102,  -78,  -82,  -82,  -84, -120,    0,    0,
     0,    0,  -94,  -95,  -81,  -87,  -34,   -9,  -46, -102,    0,    0,
     0,    0,  -37,   45,  -27,   38,   70,  146,  -45,  -98,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const BPAWN_PSTE = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,  -16,  -24,   -8,  -19,   -1,  -21,  -33,  -31,    0,    0,
     0,    0,  -24,  -23,  -28,  -26,  -20,  -28,  -37,  -31,    0,    0,
     0,    0,  -10,  -14,  -29,  -34,  -30,  -33,  -25,  -20,    0,    0,
     0,    0,   -4,  -17,  -22,  -37,  -30,  -25,  -16,  -10,    0,    0,
     0,    0,    8,   10,    7,   -2,  -16,  -16,    4,   11,    0,    0,
     0,    0,    1,    2,   27,    8,   19,  -32,   32,   38,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const BKNIGHT_PSTS = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0, -102,    6,  -29,  -10,   29,    2,    6,   -1,    0,    0,
     0,    0,   -7,  -31,   13,   28,   33,   37,   19,   12,    0,    0,
     0,    0,   -2,    9,   30,   41,   53,   43,   48,    7,    0,    0,
     0,    0,    4,   22,   21,   16,   37,   31,   29,    5,    0,    0,
     0,    0,   -1,   26,    4,   35,   38,   61,   29,   29,    0,    0,
     0,    0,  -61,  -38,  -25,  -10,  -14,   96,    4,   47,    0,    0,
     0,    0, -114,  -76,   42,    2,    6,   29,  -14,  -61,    0,    0,
     0,    0, -193, -137,  -73,  -78,   34, -127, -103, -105,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const BKNIGHT_PSTE = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,  -57,  -78,  -49,  -42,  -55,  -46,  -79, -109,    0,    0,
     0,    0,  -72,  -41,  -27,  -24,  -22,  -35,  -49,  -75,    0,    0,
     0,    0,  -55,  -15,   -8,    6,    6,  -13,  -37,  -47,    0,    0,
     0,    0,  -40,  -26,   13,   21,   12,   12,   -7,  -40,    0,    0,
     0,    0,  -37,   -9,   23,   20,   25,    2,  -19,  -41,    0,    0,
     0,    0,  -41,  -20,   14,   18,   -4,  -13,  -27,  -67,    0,    0,
     0,    0,  -38,  -17,  -30,    6,  -11,  -29,  -41,  -72,    0,    0,
     0,    0,  -65,  -52,  -13,  -35,  -40,  -34,  -64, -123,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const BBISHOP_PSTS = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,  -20,   27,   26,   19,   24,   22,  -12,    5,    0,    0,
     0,    0,   21,   31,   27,   24,   25,   41,   62,   22,    0,    0,
     0,    0,   10,   29,   26,   24,   34,   47,   38,   25,    0,    0,
     0,    0,    2,   16,   13,   27,   31,    9,   14,   11,    0,    0,
     0,    0,    3,    5,    4,   39,   16,   18,    1,    4,    0,    0,
     0,    0,  -14,   29,   23,    6,   15,   42,   30,    4,    0,    0,
     0,    0,  -37,  -21,  -47,  -55,   -4,   24,    3,  -74,    0,    0,
     0,    0,  -37,   -9, -166, -112,  -66,  -71,  -17,  -12,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const BBISHOP_PSTE = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,  -52,  -40,  -52,  -38,  -41,  -43,  -35,  -44,    0,    0,
     0,    0,  -47,  -47,  -41,  -37,  -29,  -43,  -49,  -58,    0,    0,
     0,    0,  -39,  -34,  -25,  -24,  -21,  -34,  -36,  -40,    0,    0,
     0,    0,  -34,  -30,  -18,  -15,  -29,  -21,  -34,  -35,    0,    0,
     0,    0,  -31,  -20,  -17,  -21,  -14,  -23,  -26,  -25,    0,    0,
     0,    0,  -23,  -32,  -28,  -27,  -27,  -29,  -28,  -23,    0,    0,
     0,    0,  -24,  -24,  -15,  -24,  -22,  -30,  -22,  -30,    0,    0,
     0,    0,  -34,  -43,  -14,  -16,  -16,  -22,  -34,  -47,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const BROOK_PSTS = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,   -6,   -5,    1,   13,   13,   21,  -24,    2,    0,    0,
     0,    0,  -34,  -14,  -17,   -2,    7,   16,   -2,  -57,    0,    0,
     0,    0,  -40,  -25,  -14,  -18,    0,    6,   -1,  -27,    0,    0,
     0,    0,  -48,  -46,  -30,  -20,  -10,  -12,    5,  -36,    0,    0,
     0,    0,  -45,  -39,  -15,    1,  -14,   12,  -29,  -39,    0,    0,
     0,    0,  -30,  -13,  -13,   -9,  -34,    7,   59,  -13,    0,    0,
     0,    0,   22,   28,   64,   68,   79,   86,   11,   48,    0,    0,
     0,    0,    2,   20,  -20,   41,   39,  -31,  -27,    5,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const BROOK_PSTE = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,   11,   17,   19,   11,    9,    4,   17,  -14,    0,    0,
     0,    0,   15,   13,   17,   15,    3,    1,    3,   19,    0,    0,
     0,    0,   23,   24,   14,   19,    9,    5,   12,    9,    0,    0,
     0,    0,   34,   39,   37,   28,   19,   18,   14,   21,    0,    0,
     0,    0,   40,   36,   42,   26,   31,   29,   28,   37,    0,    0,
     0,    0,   40,   40,   37,   38,   39,   25,   15,   25,    0,    0,
     0,    0,   23,   21,   12,   10,   -3,    5,   27,   16,    0,    0,
     0,    0,   42,   33,   49,   31,   33,   47,   44,   36,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const BQUEEN_PSTS = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    6,    9,    9,   28,    8,   -6,   -5,  -37,    0,    0,
     0,    0,  -20,    6,   21,   20,   30,   34,   15,   23,    0,    0,
     0,    0,  -21,   11,   -6,    6,    1,    0,    8,    5,    0,    0,
     0,    0,   -5,  -44,  -14,  -23,  -10,   -9,  -13,  -10,    0,    0,
     0,    0,  -43,  -34,  -30,  -34,  -17,   -7,  -14,  -11,    0,    0,
     0,    0,  -11,  -21,    6,  -30,   23,   74,   51,   63,    0,    0,
     0,    0,   88,   51,   91,   94,   56,  149,  128,  156,    0,    0,
     0,    0,  -26,  -30,   12,    5,  133,  102,   82,   53,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const BQUEEN_PSTE = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,  -62,  -78,  -60,  -77,  -34,  -52,  -55,  -69,    0,    0,
     0,    0,  -43,  -64,  -66,  -58,  -61,  -61,  -74,  -53,    0,    0,
     0,    0,  -18,  -69,  -17,  -36,  -24,   -3,    1,   11,    0,    0,
     0,    0,  -42,   16,   -8,   25,   -3,   12,   29,   24,    0,    0,
     0,    0,   11,    3,    4,   26,   43,   31,   67,   52,    0,    0,
     0,    0,  -37,  -15,  -29,   47,   34,    2,   12,   -8,    0,    0,
     0,    0, -101,  -63,  -53,  -31,   -1,  -57,  -53,  -73,    0,    0,
     0,    0,  -28,   24,    7,   10,  -43,  -32,  -41,   14,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const BKING_PSTS = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    4,   71,   57,  -36,   42,   -4,   62,   42,    0,    0,
     0,    0,   38,   64,   28,  -20,   -4,   10,   58,   51,    0,    0,
     0,    0,    6,   23,    3,  -25,  -31,  -21,   13,  -16,    0,    0,
     0,    0,  -65,   34,  -35, -102, -109,  -58,  -61,  -97,    0,    0,
     0,    0,  -45,  -22,    7,  -41,  -63,  -53,  -26,  -98,    0,    0,
     0,    0,   59,   64,   98,  -35,   33,   64,  133,  -36,    0,    0,
     0,    0,  152,   56,   22,  111,   15,   52,  -12, -182,    0,    0,
     0,    0, -228,  108,  154,  -16, -193, -174,   13,   24,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

const BKING_PSTE = [
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,  -85,  -70,  -55,  -33,  -57,  -33,  -57,  -79,    0,    0,
     0,    0,  -57,  -44,  -22,  -15,  -11,  -17,  -34,  -47,    0,    0,
     0,    0,  -36,  -25,  -10,    0,    4,   -1,  -13,  -23,    0,    0,
     0,    0,  -28,  -28,    7,   19,   24,   13,    3,  -11,    0,    0,
     0,    0,  -12,    6,    8,   13,   17,   26,   20,    5,    0,    0,
     0,    0,  -19,   -9,  -15,    5,   -2,   32,   17,    5,    0,    0,
     0,    0,  -55,  -20,  -11,  -20,   -1,   14,    3,   24,    0,    0,
     0,    0, -105,  -78,  -63,  -50,   -4,   25,  -28,  -44,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
];

var WM_PST = [NULL_PST, WPAWN_PSTE,  WKNIGHT_PSTE, WBISHOP_PSTE, WROOK_PSTE, WQUEEN_PSTE, WKING_PSTE];  // move ordering
var BM_PST = [NULL_PST, BPAWN_PSTE,  BKNIGHT_PSTE, BBISHOP_PSTE, BROOK_PSTE, BQUEEN_PSTE, BKING_PSTE];

//}}}

//}}}
//{{{  primitives

//{{{  utilities

//{{{  myround

function myround(x) {
  return Math.sign(x) * Math.round(Math.abs(x));
}

//}}}
//{{{  docmd

function docmd(x) {
  onmessage({data: x});
}

//}}}
//{{{  now

function now() {
  return performance.now() | 0;
}

//}}}

//}}}
//{{{  move primitives

function moveClean (move) {
  return move & MOVE_CLEAN_MASK;
}

function moveIsNoisy (move) {
  return (move & MOVE_NOISY_MASK) != 0;
}

function moveIsQuiet (move) {
  return (move & MOVE_NOISY_MASK) == 0;
}

function moveEq (m1,m2) {
  return (m1 & MOVE_CLEAN_MASK) == (m2 & MOVE_CLEAN_MASK);
}

function moveFromSq (move) {
  return (move & MOVE_FR_MASK) >>> MOVE_FR_BITS;
}

function moveToSq (move) {
  return (move & MOVE_TO_MASK) >>> MOVE_TO_BITS;
}

function moveToObj (move) {
  return (move & MOVE_TOOBJ_MASK) >>> MOVE_TOOBJ_BITS;
}

function moveFromObj (move) {
  return (move & MOVE_FROBJ_MASK) >>> MOVE_FROBJ_BITS;
}

function movePromotePiece (move) {
  return ((move & MOVE_PROMAS_MASK) >>> MOVE_PROMAS_BITS) + 2;
}

function formatMove (move, fmt) {

  if (move == 0)
    return 'NULL';

  var fr    = (move & MOVE_FR_MASK   ) >>> MOVE_FR_BITS;
  var to    = (move & MOVE_TO_MASK   ) >>> MOVE_TO_BITS;
  var toObj = (move & MOVE_TOOBJ_MASK) >>> MOVE_TOOBJ_BITS;
  var frObj = (move & MOVE_FROBJ_MASK) >>> MOVE_FROBJ_BITS;

  var frCoord = COORDS[fr];
  var toCoord = COORDS[to];

  var frPiece = frObj & PIECE_MASK;
  var frCol   = frObj & COLOR_MASK;
  var frName  = NAMES[frPiece];

  var toPiece = toObj & PIECE_MASK;
  var toCol   = toObj & COLOR_MASK;
  var toName  = NAMES[toPiece];

  if (move & MOVE_PROMOTE_MASK)
    var pro = PROMOTES[(move & MOVE_PROMAS_MASK) >>> MOVE_PROMAS_BITS];
  else
    var pro = '';

  if (fmt == UCI_FMT)
    return frCoord + toCoord + pro;

  if (pro)
    pro = '=' + pro.toUpperCase();

  if (toObj != NULL) {
    if (frPiece == PAWN)
      return frCoord + 'x' + toCoord + pro;
    else
      return frName + 'x' + toCoord;
  }

  if (frPiece == PAWN)
    return toCoord + pro;

  if (move == MOVE_E1G1 || move == MOVE_E8G8)
    return 'O-O';

  if (move == MOVE_E1C1 || move == MOVE_E8C8)
    return 'O-O-O';

  return frName + toCoord;

}

//}}}
//{{{  board primitives

function objColour (obj) {
  return obj & COLOUR_MASK;
}

function objPiece (obj) {
  return obj & PIECE_MASK;
}

function colourIndex (c) {
  return c >>> 3;
}

function colourIndexToggle (i) {
  return Math.abs(i-1);
}

function colourMultiplier (c) {
  return (-c >> 31) | 1;
}

function colourToggle (c) {
  return ~c & COLOUR_MASK;
}

function flipSq (sq) {
  let m = (143 - sq) / 12 | 0;
  return 12*m + sq%12;
}

function flipFen (fen) {

  const [board, color, castling, enPassant, halfmove, fullmove] = fen.split(' ');

  const mirroredBoard = board.split('/').reverse().map(row => {
    return row.split('').map(char => {
      if (char === char.toUpperCase()) {
        return char.toLowerCase();
      } else if (char === char.toLowerCase()) {
        return char.toUpperCase();
      }
      return char;
    }).join('');
  }).join('/');

  const mirroredColor = color === 'w' ? 'b' : 'w';

  const mirrorCastling = castling.split('').map(right => {
    switch(right) {
      case 'K': return 'k';
      case 'Q': return 'q';
      case 'k': return 'K';
      case 'q': return 'Q';
      default: return right;
    }
  }).join('');

  const mirroredEnPassant = enPassant === '-' ? '-' :
    enPassant[0] + (9 - parseInt(enPassant[1]));

  const newFen = [
    mirroredBoard,
    mirroredColor,
    mirrorCastling || '-',
    mirroredEnPassant,
    halfmove,
    fullmove
  ].join(' ');

  return newFen;
};

//}}}
//{{{  prng primitives
//
// https://en.wikipedia.org/wiki/Mersenne_Twister
//

let twisterList  = new Uint32Array(624);
let twisterIndex = 0;

function twisterInit(seed) {

  const mt = twisterList;

  mt[0] = seed >>> 0;

  for (let i = 1; i < 624; i++) {
    mt[i] = (0x6C078965 * (mt[i - 1] ^ (mt[i - 1] >>> 30)) + i) >>> 0;
  }
}

function twisterFill() {

  const mt = twisterList;

  for (let i = 0; i < 624; i++) {
    let y = (mt[i] & 0x80000000) + (mt[(i + 1) % 624] & 0x7FFFFFFF);
    mt[i] = mt[(i + 397) % 624] ^ (y >>> 1);
    if (y % 2 !== 0) {
      mt[i] ^= 0x9908B0DF;
    }
  }
}

function twisterRand() {

  const mt = twisterList;

  if (twisterIndex === 0)
    twisterFill();

  let y = mt[twisterIndex];
  y ^= y >>> 11;
  y ^= (y << 7)  & 0x9D2C5680;
  y ^= (y << 15) & 0xEFC60000;
  y ^= y >>> 18;

  twisterIndex = (twisterIndex + 1) % 624;

  return y >>> 0;
}

twisterInit(0x9E3779B9);

//}}}
//{{{  net primitives

//{{{  activations

function relu(x) {
  return Math.max(0, x);
}

function crelu(x) {
  return Math.min(Math.max(x, 0), net_quantise_a);
}

function screlu(x) {
  const y = Math.min(Math.max(x, 0), net_quantise_a);
  return y * y;
}

function sqrrelu(x) {
  const y = Math.max(0, x);
  return y * y;
}

//}}}
//{{{  flipIndex
//
// Slow. Only use during init.
//

function flipIndex (index) {

  const piece         = Math.floor(index / 64);
  const square        = index % 64;
  const flippedSquare = square ^ 56;
  const flippedPiece  = (piece + 6) % 12;
  const flippedIndex  = flippedPiece * 64 + flippedSquare;

  return flippedIndex;

}

//}}}
//{{{  bullet2lozza
//
// bullet index 0 is a1. Lozza index 0 is a8.
// The piece order is the same.
// Apply this when loading the weights from the bullet .bin file.
//
// Slow. Only use during init.
//

function bullet2lozza (index) {

  const piece        = Math.floor(index / 64);
  const bulletSquare = index % 64;
  const lozzaSquare  = bulletSquare ^ 56;          // map a1 to a8 etc
  const lozzaIndex   = piece * 64 + lozzaSquare;

  return lozzaIndex;

}

//}}}

//}}}

//}}}

//{{{  lozChess class

//{{{  lozChess
//
// node[0]
//   .root            =  true;
//   .ply             =  0
//   .parentNode      => NULL
//   .grandParentNode => NULL
//   .childNode       => node[1];
//
// node[1]
//   .root            =  false;
//   .ply             =  1
//   .parentNode      => node[0]
//   .grandParentNode => NULL
//   .childNode       => node[2];
//
// ...
//
// node[n]
//   .root            =  false;
//   .ply             =  n
//   .parentNode      => node[n-1]
//   .grandParentNode => node[n-2] | NULL
//   .childNode       => node[n+1] | NULL
//
// etc.
//
// Search starts at node[0] with a depth spec.  In Lozza "depth" is the depth to
// search and can jump around all over the place with extensions and reductions,
// "ply" is the distance from the root.  Killers are stored in nodes because they
// need to be ply based not depth based.  The .grandParentNode pointer can be used
// to easily look up killers for the previous move of the same colour and compute
// improving etc.
//
// This function must be weights independent; they are loaded later.
//

function lozChess () {

  this.nodes = Array(MAX_PLY);

  var parentNode = null;
  for (var i=0; i < this.nodes.length; i++) {
    this.nodes[i]      = new lozNode(parentNode);
    this.nodes[i].ply  = i;                     // distance to root node for mate etc
    parentNode         = this.nodes[i];
    this.nodes[i].root = i == 0;
  }

  this.board = new lozBoard();
  this.stats = new lozStats();
  this.uci   = new lozUCI();

  this.rootNode = this.nodes[0];

  for (var i=0; i < this.nodes.length; i++)
    this.nodes[i].board = this.board;

  this.board.init();

  //{{{  init STARRAY (b init in here)
  //
  // STARRAY can be used when in check to filter moves that cannot possibly
  // be legal without overhead.  Happily EP captures fall out in the wash
  // since they are to a square that a knight would be checking the king on.
  //
  // e.g. with a king on A1, STARRAY[A1] =
  //
  // 1  0  0  0  0  0  0  2
  // 1  0  0  0  0  0  2  0
  // 1  0  0  0  0  2  0  0
  // 1  0  0  0  2  0  0  0
  // 1  0  0  2  0  0  0  0
  // 1 -1  2  0  0  0  0  0
  // 1  2 -1  0  0  0  0  0
  // 0  3  3  3  3  3  3  3
  //
  // Now condsider a rook on H1.  Slides to H2-H7 are not considered because they
  // do not hit a ray and thus cannot be used to block a check.  The rook slide
  // to H8 hits a ray, but corners are special cases - you can't slide to a corner
  // to block a check, so it's also ignored.  The slides to G1-B1 hit rays but the
  // from and to rays are the same, so again these slides cannot block a check.
  // Captures to any ray are always considered. -1 = knight attacks, so slides must
  // be to rays > 0 to be considered at all.  This vastly reduces the number of
  // moves to consider when in check and is available pretty much for free.  Captures
  // could be further pruned by considering the piece type encountered - i.e. can it
  // theoretically be giving check or not.
  //
  
  for (var i=0; i < this.board.b.length; i++)
    this.board.b[i] = EDGE;
  
  for (var i=0; i < B88.length; i++)
    this.board.b[B88[i]] = NULL;
  
  for (var i=0; i < 144; i++) {
    STARRAY[i] = Array(144);
    for (var j=0; j < 144; j++)
      STARRAY[i][j] = 0;
  }
  
  for (var i=0; i < B88.length; i++) {
    var sq = B88[i];
    for (var j=0; j < KING_OFFSETS.length; j++) {
      var offset = KING_OFFSETS[j];
      for (var k=1; k < 8; k++) {
        var dest = sq + k * offset;
        if (this.board.b[dest] == EDGE)
          break;
        STARRAY[sq][dest] = j+1;
      }
    }
    for (var j=0; j < KNIGHT_OFFSETS.length; j++) {
      var offset = KNIGHT_OFFSETS[j];
      var dest   = sq + offset;
      if (this.board.b[dest] == EDGE)
        continue;
      STARRAY[sq][dest] = -1;
    }
  }
  
  //}}}
  //{{{  init IMAP
  //
  // In Lozza an 'object' is a piece of either colour.
  //
  // IMAP is used to lookup a [0,767] index from an (object,square) pair.
  // The corresponding array of net_h1_size weights will be pointed to
  // by board.net_h1_w[index] and board.net_h2_w[index] for the flipped
  // accumulator. There is only one set of weights; board.net_h1_w and
  // board.net_h2_w just point in different directions as needed. See
  // also board.netLoad().
  //
  
  for (var i=0; i < 16; i++) {
    IMAP[i] = Array(144).fill(0);
  }
  
  for (var i=0; i < 64; i++) {
  
    const j = B88[i];
  
    IMAP[0][j] = net_i_size;
  
    IMAP[W_PAWN][j]   =   0 + (PAWN-1)   * 64 + i;
    IMAP[W_KNIGHT][j] =   0 + (KNIGHT-1) * 64 + i;
    IMAP[W_BISHOP][j] =   0 + (BISHOP-1) * 64 + i;
    IMAP[W_ROOK][j]   =   0 + (ROOK-1)   * 64 + i;
    IMAP[W_QUEEN][j]  =   0 + (QUEEN-1)  * 64 + i;
    IMAP[W_KING][j]   =   0 + (KING-1)   * 64 + i;
  
    IMAP[B_PAWN][j]   = 384 + (PAWN-1)   * 64 + i;
    IMAP[B_KNIGHT][j] = 384 + (KNIGHT-1) * 64 + i;
    IMAP[B_BISHOP][j] = 384 + (BISHOP-1) * 64 + i;
    IMAP[B_ROOK][j]   = 384 + (ROOK-1)   * 64 + i;
    IMAP[B_QUEEN][j]  = 384 + (QUEEN-1)  * 64 + i;
    IMAP[B_KING][j]   = 384 + (KING-1)   * 64 + i;
  }
  
  //}}}

  return this;
}

//}}}
//{{{  .init

lozChess.prototype.init = function () {

  for (var i=0; i < this.nodes.length; i++)
    this.nodes[i].init();

  this.board.init();
  this.stats.init();
}

//}}}
//{{{  .newGameInit

lozChess.prototype.newGameInit = function () {

  this.board.ttInit();
  this.uci.numMoves = 0;
}

//}}}
//{{{  .position

lozChess.prototype.position = function () {

  this.init();
  return this.board.position();
}

//}}}
//{{{  .report

lozChess.prototype.report = function(units,value,depth) {

  var depthStr = 'depth ' + depth + ' seldepth ' + this.stats.selDepth;
  var scoreStr = 'score ' + units + ' ' + value;
  var nodeStr  = this.stats.nodeStr();
  var hashStr  = 'hashfull ' + (1000 * this.board.hashUsed / TTSIZE | 0);
  var pvStr    = 'pv ' + this.board.getPVStr(this.rootNode,this.stats.bestMove,depth);

  this.uci.send('info', depthStr, scoreStr, nodeStr, hashStr, pvStr);
}

//}}}
//{{{  .go

lozChess.prototype.go = function() {

  var board = this.board;
  var spec  = this.uci.spec;

  //{{{  sort out spec
  
  var totTime = 0;
  var movTime = 0;
  var incTime = 0;
  
  if (spec.depth <= 0)
    spec.depth = MAX_PLY;
  
  if (spec.moveTime > 0)
    this.stats.moveTime = spec.moveTime;
  
  if (spec.maxNodes > 0)
    this.stats.maxNodes = spec.maxNodes;
  
  if (spec.moveTime == 0) {
  
    if (spec.movesToGo > 0)
      var movesToGo = spec.movesToGo + 2;
    else
      var movesToGo = 30;
  
    if (board.turn == WHITE) {
      totTime = spec.wTime;
      incTime = spec.wInc;
    }
    else {
      totTime = spec.bTime;
      incTime = spec.bInc;
    }
  
    movTime = myround(totTime / movesToGo) + incTime;
    movTime = movTime * 0.95;
  
    if (movTime > 0)
      this.stats.moveTime = movTime | 0;
  
    if (this.stats.moveTime < 1 && (spec.wTime || spec.bTime))
      this.stats.moveTime = 1;
  }
  
  //}}}

  var alpha       = 0;
  var beta        = 0;
  var ply         = 1;
  var maxPly      = spec.depth;
  var bestMoveStr = '';
  var score       = 0;
  var delta       = 0;
  var depth       = 0;
  var lastScore   = 0;
  var lastDepth   = 0;

  for (ply=1; ply <= maxPly; ply++) {

    this.stats.ply = ply;

    alpha = -INFINITY;
    beta  = INFINITY;
    delta = 10;

    if (ply >= 4) {
      alpha = Math.max(-INFINITY, score - delta);
      beta  = Math.min(INFINITY,  score + delta);
    }

    depth = ply;

    while (1) {

      score = this.rootSearch(this.rootNode, depth, board.turn, alpha, beta);

      if (this.stats.timeOut)
        break;

      lastScore = score;
      lastDepth = depth;

      //{{{  better?
      
      if (score > alpha && score < beta) {
      
        this.report('cp',score,depth);
      
        if (this.stats.bestMove && this.stats.maxNodes > 0 && this.stats.nodes >= this.stats.maxNodes)
          this.stats.timeOut = 1;
      
        break;
      }
      
      //}}}
      //{{{  mate?
      
      if (Math.abs(score) >= MINMATE && Math.abs(score) <= MATE) {
      
        var mateScore = (MATE - Math.abs(score)) / 2 | 0;
        if (score < 0)
          mateScore = -mateScore;
      
        this.report('mate',mateScore,depth);
      
        break;
      }
      
      //}}}

      delta += delta / 2 | 0;

      //{{{  upper bound?
      
      if (score <= alpha) {
      
        alpha = Math.max(-INFINITY, score - delta);
        beta  = Math.min(INFINITY, ((alpha + beta) / 2) | 0);
      
        this.report('upperbound',score,depth);
      
        if (!this.stats.maxNodes)
          this.stats.bestMove = 0;
      }
      
      //}}}
      //{{{  lower bound?
      
      else if (score >= beta) {
      
        alpha = Math.max(-INFINITY, ((alpha + beta) / 2) | 0);
        beta  = Math.min(INFINITY,  score + delta);
      
        this.report('lowerbound',score,depth);
      
        //depth = Math.max(1,depth-1);
      }
      
      //}}}
    }

    if (this.stats.timeOut)
      break;
  }

  if (lozzaHost == HOST_WEB) {
    this.stats.stop();
    this.report('end',lastScore,lastDepth);
    board.makeMoveA(this.rootNode,this.stats.bestMove);
    board.makeMoveB(this.rootNode);
  }

  bestMoveStr = formatMove(this.stats.bestMove,UCI_FMT);

  this.uci.send('info score cp', this.stats.bestScore);
  this.uci.send('bestmove',bestMoveStr);
}

//}}}
//{{{  .rootSearch

lozChess.prototype.rootSearch = function (node, depth, turn, alpha, beta) {

  this.stats.nodes++;

  //{{{  housekeeping
  
  if (!node.childNode) {
    this.stats.timeOut = 1;
    return 0;
  }
  
  //}}}

  var board          = this.board;
  var nextTurn       = ~turn & COLOR_MASK;
  var oAlpha         = alpha;
  var numLegalMoves  = 0;
  var numSlides      = 0;
  var move           = 0;
  var bestMove       = 0;
  var score          = 0;
  var bestScore      = -INFINITY;
  var inCheck        = board.isKingAttacked(nextTurn);
  var R              = 0;
  var E              = 0;
  var givesCheck     = INCHECK_UNKNOWN;
  var keeper         = false;
  var doLMR          = depth >= 3;

  board.ttGet(node, depth, alpha, beta);  // load hash move

  node.inCheck = inCheck;
  node.ev      = board.getEval(INFINITY,node,turn);
  node.cache();

  if (inCheck)
    board.genEvasions(node, turn);
  else
    board.genMoves(node, turn);

  if (this.stats.timeOut)
    return 0;

  while (move = node.getNextMove()) {

    board.makeMoveA(node,move);

    //{{{  legal?
    
    if (!(move & MOVE_LEGAL_MASK) && board.isKingAttacked(nextTurn)) {
    
      board.unmakeMove(node,move);
    
      node.uncacheA();
    
      continue;
    }
    
    //}}}

    board.makeMoveB(node);

    numLegalMoves++;
    if (node.base < BASE_LMR)
      numSlides++;

    //{{{  send current move to UCI?
    
    if (this.stats.nodes > 10000000)
      this.uci.send('info currmove ' + formatMove(move,SAN_FMT) + ' currmovenumber ' + numLegalMoves);
    
    //}}}

    //{{{  extend/reduce
    
    givesCheck = INCHECK_UNKNOWN;
    E          = 0;
    R          = 0;
    
    if (inCheck) {
      E = 1;
    }
    
    else if (doLMR && numLegalMoves > 1) {
    
      givesCheck = board.isKingAttacked(turn);
      keeper     = node.base >= BASE_LMR || (move & KEEPER_MASK) || givesCheck || board.alphaMate(alpha);
    
      if (!keeper && numSlides > 4) {
        R = 1 + depth/5 + numSlides/20 | 0;
      }
    }
    
    //}}}

    const nullWindow = numLegalMoves > 1 || R;

    score = alpha;

    if (nullWindow)
      score = -this.search(node.childNode, depth+E-R-1, nextTurn, -alpha-1, -alpha, givesCheck);

    if (!this.stats.timeOut && (!nullWindow || score > alpha))
     score = -this.search(node.childNode, depth+E-1, nextTurn, -beta, -alpha, givesCheck);

    //{{{  unmake move
    
    board.unmakeMove(node,move);
    
    node.uncacheA();
    node.uncacheB();
    
    //}}}

    if (this.stats.timeOut)
      return 0;

    if (score > bestScore) {

      bestScore = score;
      bestMove  = move;

      if (bestScore > alpha) {

        alpha = bestScore;

        this.stats.bestMove  = bestMove;
        this.stats.bestScore = bestScore;

        if (bestScore >= beta) {
          node.addKiller(bestScore, bestMove);
          board.ttPut(TT_BETA, depth, bestScore, bestMove, node.ply, alpha, beta, INFINITY);
          board.addHistory(depth*depth*depth, bestMove);
          return bestScore;
        }

        else
          board.addHistory(depth*depth, bestMove);
      }
    }

    else
      board.addHistory(-depth, move);
  }

  if (numLegalMoves == 1)
    this.stats.timeOut = 1;  // only one legal move so don't waste any more time

  if (numLegalMoves == 0) {
    this.stats.timeOut = 1;  // silly position
    this.stats.bestMove = 0;
    this.stats.bestScore = 0;
  }

  if (bestScore > oAlpha) {
    board.ttPut(TT_EXACT, depth, bestScore, bestMove, node.ply, alpha, beta, INFINITY);
    return bestScore;
  }
  else {
    board.ttPut(TT_ALPHA, depth, bestScore, bestMove, node.ply, alpha, beta, INFINITY);
    return bestScore;
  }
}

//}}}
//{{{  .search

lozChess.prototype.search = function (node, depth, turn, alpha, beta, inCheck) {

  //{{{  housekeeping
  
  if (!node.childNode) {
    this.stats.timeOut = 1;
    return 0;
  }
  
  this.stats.checkTime();
  if (this.stats.timeOut)
    return 0;
  
  if (node.ply > this.stats.selDepth)
    this.stats.selDepth = node.ply;
  
  //}}}

  var board    = this.board;
  var nextTurn = ~turn & COLOR_MASK;
  var score    = 0;
  var pvNode   = beta != (alpha + 1);

  //{{{  mate distance pruning
  
  var matingValue = MATE - node.ply;
  
  if (matingValue < beta) {
     beta = matingValue;
     if (alpha >= matingValue)
       return matingValue;
  }
  
  var matingValue = -MATE + node.ply;
  
  if (matingValue > alpha) {
     alpha = matingValue;
     if (beta <= matingValue)
       return matingValue;
  }
  
  //}}}
  //{{{  check for draws
  
  if (board.isDraw())
    return 0;
  
  //}}}

  if (inCheck == INCHECK_UNKNOWN)
    inCheck  = board.isKingAttacked(nextTurn);

  //{{{  horizon
  
  if (!inCheck && depth <= 0)
    return this.qSearch(node, -1, turn, alpha, beta);
  
  depth = Math.max(depth,0);
  
  //}}}
  //{{{  try tt
  
  score = board.ttGet(node, depth, alpha, beta);  // sets/clears node.hashMove and node.hashEval
  
  if (!pvNode && score != TTSCORE_UNKNOWN)
    return score;
  
  //}}}

  var R         = 0;
  var E         = 0;
  var lonePawns = (turn == WHITE && board.wCount == board.wCounts[PAWN]+1) || (turn == BLACK && board.bCount == board.bCounts[PAWN]+1);
  var doBeta    = !pvNode && !inCheck && !lonePawns && !board.betaMate(beta);
  var ev        = board.getEval(INFINITY, node, turn);

  //{{{  improving
  
  var improving = 0;
  
  //if (!inCheck) {
    //const n2 = node.grandparentNode;
    //if (n2) {
      //if (!n2.inCheck && ev > n2.ev)
        //improving = 1;
      //else {
        //const n4 = n2.grandparentNode;
        //if (n4 && !n4.inCheck && ev > n4.ev)
          //improving = 1;
      //}
    //}
  //}
  
  //}}}
  //{{{  beta prune
  
  if (doBeta && depth <= 4 && (ev - depth * 200) >= beta)
    return beta;
  
  //}}}
  //{{{  alpha prune
  
  //var doAlpha = !pvNode && !inCheck && !lonePawns && !board.alphaMate(alpha);
  
  //if (doAlpha && depth <= 5 && (ev + 1000) <= alpha)
    //return alpha;
  
  //}}}

  node.inCheck = inCheck;
  node.ev      = ev;
  node.cache();

  //{{{  NMP
  //
  // Use .childNode to make sure killers are aligned.
  //
  
  R = 3;
  
  if (doBeta && depth > 2 && ev > (beta - improving * 0)) {  // hack
  
    board.loHash ^= board.loEP[board.ep];
    board.hiHash ^= board.hiEP[board.ep];
  
    board.ep = 0;
  
    board.loHash ^= board.loEP[board.ep];
    board.hiHash ^= board.hiEP[board.ep];
  
    board.loHash ^= board.loTurn;
    board.hiHash ^= board.hiTurn;
  
    score = -this.search(node.childNode, depth-R-1, nextTurn, -beta, -beta+1, INCHECK_UNKNOWN);
  
    node.uncacheA();
    node.uncacheB();
  
    if (this.stats.timeOut)
      return 0;
  
    if (score >= beta) {
      if (board.betaMate(score))
        score = beta;
      return score;
    }
  
    if (this.stats.timeOut)
      return 0;
  }
  
  R = 0;
  
  //}}}

  var bestScore      = -INFINITY;
  var move           = 0;
  var bestMove       = 0;
  var oAlpha         = alpha;
  var numLegalMoves  = 0;
  var numSlides      = 0;
  var givesCheck     = INCHECK_UNKNOWN;
  var keeper         = false;
  var doFutility     = !inCheck && depth <= 4 && !lonePawns;
  var doLMR          = !inCheck && depth >= 3;
  var doLMP          = !pvNode && !inCheck && depth <= 2 && !lonePawns;
  var doIID          = !node.hashMove && pvNode && depth > 3;

  //{{{  IID
  //
  // If there is no hash move after IID it means that the search returned
  // a mate or draw score and we could return immediately I think, because
  // the subsequent search is presumably going to find the same.  However
  // it's a small optimisation and I'm not totally convinced.  Needs to be
  // tested.
  //
  // Use this node so the killers align.  Should be safe.
  //
  
  if (doIID) {
  
    this.search(node, depth-2, turn, alpha, beta, inCheck);
    board.ttGet(node, 0, alpha, beta);
  }
  
  if (this.stats.timeOut)
    return 0;
  
  //hack if (!node.hashMove) {
    //depth = Math.max(depth-1,0);
  //}
  
  //}}}

  if (ev != INFINITY)
    board.ttUpdateEval(ev);

  if (inCheck)
    board.genEvasions(node, turn);
  else
    board.genMoves(node, turn);

  if (this.stats.timeOut)
    return 0;

  this.stats.nodes++;

  while (move = node.getNextMove()) {

    if (node.base < BASE_LMR)
      numSlides++;

    //{{{  extend/reduce/prune
    
    givesCheck = INCHECK_UNKNOWN;
    E          = 0;
    R          = 0;
    
    if (inCheck && (pvNode || depth < 5)) {
      E = 1;
    }
    
    else if (numLegalMoves > 0 && (doLMP || doLMR || doFutility)) {
    
      keeper = node.base >= BASE_LMR || (move & KEEPER_MASK) || board.alphaMate(alpha);
    
      if (!keeper) {
    
        board.makePseudoMove(move);
        givesCheck = board.isKingAttacked(turn);
        board.unmakePseudoMove(move);
    
        if (doLMP && !givesCheck && numSlides > depth*(5)) {
          continue;
        }
    
        if (doFutility && (ev + depth * 120) < alpha && !givesCheck) {
          continue;
        }
    
        if (doLMR && !givesCheck && node.sortedIndex > 4) {
          R = 1 + depth/5 + numSlides/20 | 0;
        }
      }
    }
    
    //}}}

    board.makeMoveA(node,move);

    //{{{  legal
    
    if (!(move & MOVE_LEGAL_MASK) && board.isKingAttacked(nextTurn)) {
    
      board.unmakeMove(node,move);
    
      node.uncacheA();
    
      continue;
    }
    
    //}}}

    board.makeMoveB(node);

    numLegalMoves++;

    const nullWindow = (pvNode && numLegalMoves > 1) || R;

    score = alpha;

    if (nullWindow)
      score = -this.search(node.childNode, depth+E-R-1, nextTurn, -alpha-1, -alpha, givesCheck);

    if (!this.stats.timeOut && (!nullWindow || score > alpha))
      score = -this.search(node.childNode, depth+E-1, nextTurn, -beta, -alpha, givesCheck);

    //{{{  unmake move
    
    board.unmakeMove(node,move);
    
    node.uncacheA();
    node.uncacheB();
    
    //}}}

    if (this.stats.timeOut)
      return 0;

    if (score > bestScore) {

      bestScore = score;
      bestMove  = move;

      if (bestScore > alpha) {

        alpha = bestScore;

        if (bestScore >= beta) {
          node.addKiller(bestScore, bestMove);
          board.ttPut(TT_BETA, depth, bestScore, bestMove, node.ply, alpha, beta, ev);
          board.addHistory(depth*depth*depth, bestMove);
          return bestScore;
        }

        else
          board.addHistory(depth*depth, bestMove);
      }
    }

    else
      board.addHistory(-depth, move);
  }

  //{{{  mate
  
  if (numLegalMoves == 0) {
  
    if (inCheck) {
      //board.ttPut(TT_EXACT, depth, -MATE + node.ply, 0, node.ply, alpha, beta, ev);
      return -MATE + node.ply;
    }
  
    else {
      //board.ttPut(TT_EXACT, depth, 0, 0, node.ply, alpha, beta, ev);
      return 0;
    }
  }
  
  //}}}

  if (bestScore > oAlpha) {
    board.ttPut(TT_EXACT, depth, bestScore, bestMove, node.ply, alpha, beta, ev);
    return bestScore;
  }
  else {
    board.ttPut(TT_ALPHA, depth, bestScore, bestMove, node.ply, alpha, beta, ev);
    return bestScore;
  }
}

//}}}
//{{{  .qsearch

lozChess.prototype.qSearch = function (node, depth, turn, alpha, beta) {

  //{{{  housekeeping
  
  if (node.ply > this.stats.selDepth)
    this.stats.selDepth = node.ply;
  
  if (!node.childNode)
    return this.board.evaluate(turn);
  
  //}}}

  var board         = this.board;
  var numLegalMoves = 0;
  var move          = 0;
  var ev            = INFINITY;
  var phase         = 0;
  var nextTurn      = ~turn & COLOR_MASK;
  var to            = 0;

  if (board.isDraw())
    return 0;

  var score = board.ttGet(node, 0, alpha, beta);  // sets/clears node.hashMove and node.hashEval

  if (score != TTSCORE_UNKNOWN)
    return score;

  ev = board.getEval(ev, node, turn);
  if (ev >= beta)
    return ev;
  if (ev >= alpha)
    alpha = ev;

  phase = board.cleanPhase(board.phase);

  if (ev != INFINITY)
    board.ttUpdateEval(ev);

  node.inCheck = 0;
  node.cache();

  board.genQMoves(node, turn);

  this.stats.nodes++;

  while (move = node.getNextMove()) {

    //{{{  prune?
    
    // hack try and simplify this top one out
    
    if (phase <= EPHASE && !(move & MOVE_PROMOTE_MASK) && ev + 200 + MATERIAL[((move & MOVE_TOOBJ_MASK) >>> MOVE_TOOBJ_BITS) & PIECE_MASK] < alpha) {
      continue;
    }
    
    if (board.quickSee(turn, move) < 0) {
      continue;
    }
    
    //}}}

    board.makeMoveA(node,move);

    //{{{  legal?
    
    if (board.isKingAttacked(nextTurn)) {
    
      board.unmakeMove(node,move);
    
      node.uncacheA();
    
      continue;
    }
    
    //}}}

    board.makeMoveB(node);

    numLegalMoves++;

    score = -this.qSearch(node.childNode, depth-1, nextTurn, -beta, -alpha);

    //{{{  unmake move
    
    board.unmakeMove(node,move);
    
    node.uncacheA();
    node.uncacheB();
    
    //}}}

    if (this.stats.timeOut)
      return 0;

    if (score > alpha) {
      if (score >= beta) {
        board.ttPut(TT_BETA, 0, beta, 0, node.ply, alpha, beta, ev);
        return score;
      }
      alpha = score;
    }
  }

  board.ttPut(TT_ALPHA, 0, alpha, 0, node.ply, alpha, beta, ev);

  return alpha;
}

//}}}
//{{{  .perft

lozChess.prototype.perft = function () {

  var spec = this.uci.spec;

  this.stats.ply = spec.depth;

  var moves = this.perftSearch(this.rootNode, spec.depth, this.board.turn, spec.inner);

  var error = moves - spec.moves;

  if (error == 0)
    var err = '';
  else
    var err = 'ERROR ' + error;

  this.stats.nodes = moves;

  if (lozzaHost == HOST_WEB)
    this.uci.send('info string',spec.id,spec.depth,moves,spec.moves,err,this.board.fen());
}

//}}}
//{{{  .perftSearch

lozChess.prototype.perftSearch = function (node, depth, turn, inner) {

  if (depth == 0)
    return 1;

  var board         = this.board;
  var numNodes      = 0;
  var totalNodes    = 0;
  var move          = 0;
  var nextTurn      = ~turn & COLOR_MASK;
  var numLegalMoves = 0;
  var inCheck       = board.isKingAttacked(nextTurn);

  node.inCheck = inCheck;
  node.cache();

  this.stats.nodes++;

  if (inCheck)
    board.genEvasions(node, turn);
  else
    board.genMoves(node, turn);

  while (move = node.getNextMove()) {

    board.makeMoveA(node,move);

    //{{{  legal?
    
    if (!(move & MOVE_LEGAL_MASK) && board.isKingAttacked(nextTurn)) {
    
      board.unmakeMove(node,move);
    
      node.uncacheA();
    
      continue;
    }
    
    //}}}

    numLegalMoves++;

    var numNodes = this.perftSearch(node.childNode, depth-1, nextTurn);

    totalNodes += numNodes;

    //{{{  unmake move
    
    board.unmakeMove(node,move);
    
    node.uncacheA();
    
    //}}}

    if (node.root) {
      var fmove = formatMove(move,SAN_FMT);
      this.uci.send('info currmove ' + fmove + ' currmovenumber ' + numLegalMoves);
      if (inner)
        this.uci.send('info string',fmove,numNodes);
    }
  }

  return totalNodes;
}

//}}}

//}}}
//{{{  lozBoard class

//{{{  lozBoard

function lozBoard () {

  this.net_h1_w = new Array(net_i_size + 1);       // us
  this.net_h2_w = new Array(net_i_size + 1);       // them
  this.net_h1_b = new Int16Array(net_h1_size);
  this.net_o_w  = new Int16Array(net_h1_size*2);
  this.net_o_b  = 0;

  for (let i=0; i < net_i_size; i++) {
    this.net_h1_w[i] = new Int16Array(net_h1_size);
  }

  this.net_h1_w[net_i_size] = new Int16Array(net_h1_size).fill(0);

  for (let i=0; i < net_i_size; i++) {
    this.net_h2_w[i] = this.net_h1_w[flipIndex(i)];
  }

  this.net_h2_w[net_i_size] = this.net_h1_w[net_i_size];

  this.ueFunc       = myround;
  this.ueA          = 0;
  this.ueB          = 0;
  this.ueC          = 0;
  this.ueD          = 0;
  this.ueE          = 0;
  this.ueF          = 0;

  this.lozza        = null;
  this.verbose      = false;
  this.mvFmt        = 0;
  this.hashUsed     = 0;

  this.b = new Uint16Array(144);    // pieces
  this.z = new Uint16Array(144);    // indexes to w|bList

  this.wList = new Uint16Array(16); // list of squares with white pieces
  this.bList = new Uint16Array(16); // list of squares with black pieces

  this.cxList = [this.wList, this.bList];

  this.firstBP = 0;
  this.firstWP = 0;

  this.rights   = 0;
  this.ep       = 0;
  this.repLo    = 0;
  this.repHi    = 0;
  this.loHash   = 0;
  this.hiHash   = 0;
  this.net_h1_a = new Int16Array(net_h1_size);
  this.net_h2_a = new Int16Array(net_h1_size);

  this.net_a = [[this.net_h1_a, this.net_h2_a], [this.net_h2_a, this.net_h1_a]];

  //
  // Use separate typed arrays to save space.  Optimiser probably has a go anyway but
  // better to be explicit at the expense of some conversion.  Total width is 16 bytes.
  //

  this.ttLo      = new Int32Array(TTSIZE);
  this.ttHi      = new Int32Array(TTSIZE);
  this.ttType    = new Uint8Array(TTSIZE);
  this.ttDepth   = new Int8Array(TTSIZE);   // allow -ve depths but currently not used for q
  this.ttMove    = new Uint32Array(TTSIZE); // see constants for structure
  this.ttEval    = new Int16Array(TTSIZE);
  this.ttScore   = new Int16Array(TTSIZE);

  this.turn = 0;

  //{{{  Zobrist turn
  
  this.loTurn = this.rand32();
  this.hiTurn = this.rand32();
  
  //}}}
  //{{{  Zobrist pieces
  
  this.loPieces = Array(2);
  for (var i=0; i < 2; i++) {
    this.loPieces[i] = Array(6);
    for (var j=0; j < 6; j++) {
      this.loPieces[i][j] = new Array(144);
      for (var k=0; k < 144; k++)
        this.loPieces[i][j][k] = this.rand32();
    }
  }
  
  this.hiPieces = Array(2);
  for (var i=0; i < 2; i++) {
    this.hiPieces[i] = Array(6);
    for (var j=0; j < 6; j++) {
      this.hiPieces[i][j] = new Array(144);
      for (var k=0; k < 144; k++)
        this.hiPieces[i][j][k] = this.rand32();
    }
  }
  
  //}}}
  //{{{  Zobrist rights
  
  this.loRights = new Array(16);
  this.hiRights = new Array(16);
  
  for (var i=0; i < 16; i++) {
    this.loRights[i] = this.rand32();
    this.hiRights[i] = this.rand32();
  }
  
  //}}}
  //{{{  Zobrist EP
  
  this.loEP = new Array(144);
  this.hiEP = new Array(144);
  
  for (var i=0; i < 144; i++) {
    this.loEP[i] = this.rand32();
    this.hiEP[i] = this.rand32();
  }
  
  //}}}

  this.repLoHash = new Array(1000);
  for (var i=0; i < 1000; i++)
    this.repLoHash[i] = 0;

  this.repHiHash = new Array(1000);
  for (var i=0; i < 1000; i++)
    this.repHiHash[i] = 0;

  this.phase = TPHASE;

  this.wCounts = new Uint16Array(7);
  this.bCounts = new Uint16Array(7);

  this.wCount  = 0;
  this.bCount  = 0;

  this.wHistory = Array(7)
  for (var i=0; i < 7; i++)
    this.wHistory[i] = Array(144).fill(0);

  this.bHistory = Array(7)
  for (var i=0; i < 7; i++)
    this.bHistory[i] = Array(144).fill(0);

  this.objHistory = Array(15).fill([]);

  this.objHistory[W_PAWN]   = this.wHistory[W_PAWN];
  this.objHistory[W_KNIGHT] = this.wHistory[W_KNIGHT];
  this.objHistory[W_BISHOP] = this.wHistory[W_BISHOP];
  this.objHistory[W_ROOK]   = this.wHistory[W_ROOK];
  this.objHistory[W_QUEEN]  = this.wHistory[W_QUEEN];
  this.objHistory[W_KING]   = this.wHistory[W_KING];

  this.objHistory[B_PAWN]   = this.bHistory[W_PAWN];    // sic
  this.objHistory[B_KNIGHT] = this.bHistory[W_KNIGHT];
  this.objHistory[B_BISHOP] = this.bHistory[W_BISHOP];
  this.objHistory[B_ROOK]   = this.bHistory[W_ROOK];
  this.objHistory[B_QUEEN]  = this.bHistory[W_QUEEN];
  this.objHistory[B_KING]   = this.bHistory[W_KING];

}

//}}}
//{{{  .init

lozBoard.prototype.init = function () {

  for (var i=0; i < this.b.length; i++)
    this.b[i] = EDGE;

  for (var i=0; i < B88.length; i++)
    this.b[B88[i]] = NULL;

  for (var i=0; i < this.z.length; i++)
    this.z[i] = NO_Z;

  this.loHash = 0;
  this.hiHash = 0;

  this.repLo = 0;
  this.repHi = 0;

  this.phase = TPHASE;

  for (var i=0; i < this.wCounts.length; i++)
    this.wCounts[i] = 0;

  for (var i=0; i < this.bCounts.length; i++)
    this.bCounts[i] = 0;

  this.wCount = 0;
  this.bCount = 0;

  for (var i=0; i < this.wList.length; i++)
    this.wList[i] = EMPTY;

  for (var i=0; i < this.bList.length; i++)
    this.bList[i] = EMPTY;

  this.firstBP = 0;
  this.firstWP = 0;

  if (lozzaHost == HOST_WEB)
    this.mvFmt = UCI_FMT;
  else
    this.mvFmt = UCI_FMT;
}

//}}}
//{{{  .position

lozBoard.prototype.position = function () {

  const spec = lozza.uci.spec;

  //{{{  board turn
  
  if (spec.turn == 'w')
    this.turn = WHITE;
  
  else {
    this.turn = BLACK;
    this.loHash ^= this.loTurn;
    this.hiHash ^= this.hiTurn;
  }
  
  //}}}
  //{{{  board rights
  
  this.rights = 0;
  
  for (let i=0; i < spec.rights.length; i++) {
  
    var ch = spec.rights.charAt(i);
  
    if (ch == 'K') this.rights |= WHITE_RIGHTS_KING;
    if (ch == 'Q') this.rights |= WHITE_RIGHTS_QUEEN;
    if (ch == 'k') this.rights |= BLACK_RIGHTS_KING;
    if (ch == 'q') this.rights |= BLACK_RIGHTS_QUEEN;
  }
  
  this.loHash ^= this.loRights[this.rights];
  this.hiHash ^= this.hiRights[this.rights];
  
  //}}}
  //{{{  board board
  
  this.netReset();
  
  this.phase = TPHASE;
  
  var sq = 0;
  var nw = 0;
  var nb = 0;
  
  for (let j=0; j < spec.board.length; j++) {
  
    var ch  = spec.board.charAt(j);
    var chn = parseInt(ch);
  
    while (this.b[sq] == EDGE)
      sq++;
  
    if (isNaN(chn)) {
  
      if (ch != '/') {
  
        var obj   = MAP[ch];
        var piece = obj & PIECE_MASK;
        var col   = obj & COLOR_MASK;
  
        if (col == WHITE) {
          this.wList[nw] = sq;
          this.b[sq]     = obj;
          this.z[sq]     = nw;
          nw++;
          this.wCounts[piece]++;
          this.wCount++;
        }
  
        else {
          this.bList[nb] = sq;
          this.b[sq]     = obj;
          this.z[sq]     = nb;
          nb++;
          this.bCounts[piece]++;
          this.bCount++;
        }
  
        this.loHash ^= this.loPieces[col>>>3][piece-1][sq];
        this.hiHash ^= this.hiPieces[col>>>3][piece-1][sq];
  
        this.phase -= VPHASE[piece];
  
        sq++;
      }
    }
  
    else {
  
      for (let k=0; k < chn; k++) {
        this.b[sq] = NULL;
        sq++;
      }
    }
  }
  
  //}}}
  //{{{  board ep
  
  if (spec.ep.length == 2)
    this.ep = COORDS.indexOf(spec.ep)
  else
    this.ep = 0;
  
  this.loHash ^= this.loEP[this.ep];
  this.hiHash ^= this.hiEP[this.ep];
  
  //}}}

  this.compact();

  for (let i=0; i < spec.moves.length; i++) {
    if (!this.playMove(spec.moves[i]))
      return 0;
  }

  this.compact();
  this.netUpdate();

  for (let i=0; i < 7; i++)
    this.wHistory[i].fill(0);

  for (let i=0; i < 7; i++)
    this.bHistory[i].fill(0);

  return 1;
}

//}}}
//{{{  .playMove
//
// Assumes the accumulator will be computed with .netUpdate
// after all the moves have been played.
//

lozBoard.prototype.playMove = function (moveStr) {

  var move     = 0;
  var node     = lozza.rootNode;
  var nextTurn = ~this.turn & COLOR_MASK;

  node.cache();

  this.genMoves(node, this.turn);

  while (move = node.getNextMove()) {

    this.makeMoveA(node,move);

    var attacker = this.isKingAttacked(nextTurn);

    if (attacker) {

      this.unmakeMove(node,move);
      node.uncacheA();

      continue;
    }

    var fMove = formatMove(move,UCI_FMT);

    if (moveStr == fMove || moveStr+'q' == fMove) {
      this.turn = ~this.turn & COLOR_MASK;
      return true;
    }

    this.unmakeMove(node,move);
    node.uncacheA();
  }

  console.log('play move unmatched',moveStr)
  process.exit();
  return false;
}

//}}}
//{{{  .compact

lozBoard.prototype.compact = function () {

  //{{{  compact white list
  
  var v = [];
  
  for (let i=0; i<16; i++) {
    if (this.wList[i])
      v.push(this.wList[i]);
  }
  
  v.sort(function(a,b) {
    return lozza.board.b[b] - lozza.board.b[a];
  });
  
  for (let i=0; i<16; i++) {
    if (i < v.length) {
      this.wList[i] = v[i];
      this.z[v[i]]  = i;
    }
    else
      this.wList[i] = EMPTY;
  }
  
  this.firstWP = 0;
  for (let i=0; i<16; i++) {
    if (this.b[this.wList[i]] == W_PAWN) {
      this.firstWP = i;
      break;
    }
  }
  
  
  //}}}
  //{{{  compact black list
  
  var v = [];
  
  for (let i=0; i<16; i++) {
    if (this.bList[i])
      v.push(this.bList[i]);
  }
  
  v.sort(function(a,b) {
    return lozza.board.b[b] - lozza.board.b[a];
  });
  
  for (let i=0; i<16; i++) {
    if (i < v.length) {
      this.bList[i] = v[i];
      this.z[v[i]]  = i;
    }
    else
      this.bList[i] = EMPTY;
  }
  
  this.firstBP = 0;
  for (let i=0; i<16; i++) {
    if (this.b[this.bList[i]] == B_PAWN) {
      this.firstBP = i;
      break;
    }
  }
  
  //}}}
}

//}}}
//{{{  .genMoves

lozBoard.prototype.genMoves = function(node, turn) {

  node.numMoves    = 0;
  node.sortedIndex = 0;

  var b = this.b;

  //{{{  colour based stuff
  
  if (turn == WHITE) {
  
    var pOffsetOrth  = WP_OFFSET_ORTH;
    var pOffsetDiag1 = WP_OFFSET_DIAG1;
    var pOffsetDiag2 = WP_OFFSET_DIAG2;
    var pHomeRank    = 2;
    var pPromoteRank = 7;
    var rights       = this.rights & WHITE_RIGHTS;
    var pList        = this.wList;
    var theirKingSq  = this.bList[0];
    var pCount       = this.wCount;
    var CAPTURE      = IS_BNK;
    var aligned      = ALIGNED[this.wList[0]];
  
    if (rights) {
  
      if ((rights & WHITE_RIGHTS_KING)  && !b[F1] && !b[G1]           && b[SQG2] != B_KING && b[SQH2] != B_KING && !this.isAttacked(F1,BLACK))
        node.addCastle(MOVE_E1G1);
  
      if ((rights & WHITE_RIGHTS_QUEEN) && !b[B1] && !b[C1] && !b[D1] && b[SQB2] != B_KING && b[SQC2] != B_KING && !this.isAttacked(D1,BLACK))
        node.addCastle(MOVE_E1C1);
    }
  }
  
  else {
  
    var pOffsetOrth  = BP_OFFSET_ORTH;
    var pOffsetDiag1 = BP_OFFSET_DIAG1;
    var pOffsetDiag2 = BP_OFFSET_DIAG2;
    var pHomeRank    = 7;
    var pPromoteRank = 2;
    var rights       = this.rights & BLACK_RIGHTS;
    var pList        = this.bList;
    var theirKingSq  = this.wList[0];
    var pCount       = this.bCount;
    var CAPTURE      = IS_WNK;
    var aligned      = ALIGNED[this.bList[0]];
  
    if (rights) {
  
      if ((rights & BLACK_RIGHTS_KING)  && !b[F8] && !b[G8]           && b[SQG7] != B_KING && b[SQH7] != B_KING && !this.isAttacked(F8,WHITE))
        node.addCastle(MOVE_E8G8);
  
      if ((rights & BLACK_RIGHTS_QUEEN) && !b[B8] && !b[C8] && !b[D8] && b[SQB7] != B_KING && b[SQC7] != B_KING && !this.isAttacked(D8,WHITE))
        node.addCastle(MOVE_E8C8);
    }
  }
  
  //}}}

  var next    = 0;
  var count   = 0;
  var to      = 0;
  var toObj   = 0;
  var fr      = 0;
  var frObj   = 0;
  var frPiece = 0;
  var frMove  = 0;
  var frRank  = 0;
  var legalMask = 0;

  while (count < pCount) {

    fr = pList[next];
    if (!fr) {
      next++;
      continue;
    }

    frObj     = b[fr];
    frPiece   = frObj & PIECE_MASK;
    frMove    = (frObj << MOVE_FROBJ_BITS) | (fr << MOVE_FR_BITS);
    frRank    = RANK[fr];
    legalMask = !this.inCheck && !aligned[fr] ? MOVE_LEGAL_MASK : 0;

    if (frPiece == PAWN) {
      //{{{  P
      
      frMove |= MOVE_PAWN_MASK;
      
      to     = fr + pOffsetOrth;
      toObj  = b[to];
      
      if (!toObj) {
      
        if (frRank == pPromoteRank)
          node.addPromotion(frMove | to | legalMask);
      
        else {
          node.addSlide(frMove | to | legalMask);
      
          if (frRank == pHomeRank) {
      
            to += pOffsetOrth;
            if (!b[to])
              node.addSlide(frMove | to | MOVE_EPMAKE_MASK | legalMask);
          }
        }
      }
      
      to    = fr + pOffsetDiag1;
      toObj = b[to];
      
      if (CAPTURE[toObj]) {
      
        if (frRank == pPromoteRank)
          node.addPromotion(frMove | (toObj << MOVE_TOOBJ_BITS) | to | legalMask);
        else
          node.addCapture(frMove | (toObj << MOVE_TOOBJ_BITS) | to | legalMask);
      }
      
      else if (!toObj && to == this.ep)
        node.addEPTake(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
      
      to    = fr + pOffsetDiag2;
      toObj = b[to];
      
      if (CAPTURE[toObj]) {
      
        if (frRank == pPromoteRank)
          node.addPromotion(frMove | (toObj << MOVE_TOOBJ_BITS) | to | legalMask);
        else
          node.addCapture(frMove | (toObj << MOVE_TOOBJ_BITS) | to | legalMask);
      }
      
      else if (!toObj && to == this.ep)
        node.addEPTake(frMove | to);
      
      //}}}
    }

    else if (IS_N[frObj]) {
      //{{{  N
      
      var offsets = OFFSETS[frPiece];
      var dir     = 0;
      
      while (dir < 8) {
      
        to    = fr + offsets[dir++];
        toObj = b[to];
      
        if (!toObj)
          node.addSlide(frMove | to | legalMask);
        else if (CAPTURE[toObj])
          node.addCapture(frMove | (toObj << MOVE_TOOBJ_BITS) | to | legalMask);
      }
      
      //}}}
    }

    else if (IS_K[frObj]) {
      //{{{  K
      
      var offsets = OFFSETS[frPiece];
      var dir     = 0;
      
      while (dir < 8) {
      
        to    = fr + offsets[dir++];
        toObj = b[to];
      
        if (!ADJACENT[Math.abs(to-theirKingSq)]) {
          if (!toObj)
            node.addSlide(frMove | to);
          else if (CAPTURE[toObj])
            node.addCapture(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
        }
      }
      
      //}}}
    }

    else {
      //{{{  BRQ
      
      var offsets = OFFSETS[frPiece];
      var len     = offsets.length;
      var dir     = 0;
      
      while (dir < len) {
      
        var offset = offsets[dir++];
      
        to     = fr + offset;
        toObj  = b[to];
      
        while (!toObj) {
      
          node.addSlide(frMove | to | legalMask);
      
          to    += offset;
          toObj = b[to];
        }
      
        if (CAPTURE[toObj])
          node.addCapture(frMove | (toObj << MOVE_TOOBJ_BITS) | to | legalMask);
      }
      
      //}}}
    }

    next++;
    count++
  }
}

//}}}
//{{{  .genEvasions

lozBoard.prototype.genEvasions = function(node, turn) {

  node.numMoves    = 0;
  node.sortedIndex = 0;

  var b = this.b;

  //{{{  colour based stuff
  
  if (turn == WHITE) {
  
    var pOffsetOrth  = WP_OFFSET_ORTH;
    var pOffsetDiag1 = WP_OFFSET_DIAG1;
    var pOffsetDiag2 = WP_OFFSET_DIAG2;
    var pHomeRank    = 2;
    var pPromoteRank = 8;
    var pList        = this.wList;
    var pCount       = this.wCount;
    var ray          = STARRAY[this.wList[0]];
    var myKing       = W_KING;
    var theirKingSq  = this.bList[0];
  }
  
  else {
  
    var pOffsetOrth  = BP_OFFSET_ORTH;
    var pOffsetDiag1 = BP_OFFSET_DIAG1;
    var pOffsetDiag2 = BP_OFFSET_DIAG2;
    var pHomeRank    = 7;
    var pPromoteRank = 1;
    var pList        = this.bList;
    var pCount       = this.bCount;
    var ray          = STARRAY[this.bList[0]];
    var myKing       = B_KING;
    var theirKingSq  = this.wList[0];
  }
  
  //}}}

  var next  = 0;
  var count = 0;

  while (count < pCount) {

    var fr = pList[next];
    if (!fr) {
      next++;
      continue;
    }

    var frObj   = this.b[fr];
    var frPiece = frObj & PIECE_MASK;
    var frMove  = (frObj << MOVE_FROBJ_BITS) | (fr << MOVE_FR_BITS);
    var rayFrom = ray[fr];

    if (frPiece == PAWN) {
      //{{{  pawn
      
      frMove |= MOVE_PAWN_MASK;
      
      var to        = fr + pOffsetOrth;
      var toObj     = b[to];
      var rayTo     = ray[to];
      var keepSlide = rayTo > 0 && (rayTo != rayFrom) && !CORNERS[to];
      
      if (toObj == NULL) {
      
        if (RANK[to] == pPromoteRank && keepSlide)
          node.addPromotion(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
      
        else {
          if (keepSlide)
            node.addSlide(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
      
          if (RANK[fr] == pHomeRank) {
      
            to       += pOffsetOrth;
            toObj     = b[to];
            rayTo     = ray[to];
            keepSlide = rayTo > 0 && (rayTo != rayFrom) && !CORNERS[to];
      
            if (toObj == NULL && keepSlide)
              node.addSlide(frMove | (toObj << MOVE_TOOBJ_BITS) | to | MOVE_EPMAKE_MASK);
          }
        }
      }
      
      var to    = fr + pOffsetDiag1;
      var toObj = b[to];
      var rayTo = ray[to];
      
      if (toObj != NULL && toObj != EDGE && (toObj & COLOR_MASK) != turn && rayTo) {
      
        if (RANK[to] == pPromoteRank)
          node.addPromotion(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
        else
          node.addCapture(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
      }
      
      else if (toObj == NULL && to == this.ep && rayTo)
        node.addEPTake(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
      
      var to    = fr + pOffsetDiag2;
      var toObj = b[to];
      var rayTo = ray[to];
      
      if (toObj != NULL && toObj != EDGE && (toObj & COLOR_MASK) != turn && rayTo) {
      
        if (RANK[to] == pPromoteRank)
          node.addPromotion(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
        else
          node.addCapture(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
      }
      
      else if (toObj == NULL && to == this.ep && rayTo)
        node.addEPTake(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
      
      //}}}
    }

    else {
      //{{{  not a pawn
      
      var offsets = OFFSETS[frPiece];
      var limit   = LIMITS[frPiece];
      
      for (var dir=0; dir < offsets.length; dir++) {
      
        var offset = offsets[dir];
      
        for (var slide=1; slide<=limit; slide++) {
      
          var to    = fr + offset * slide;
          var toObj = b[to];
          var rayTo = ray[to];
      
          if (toObj == NULL) {
            if ((frObj == myKing && !ADJACENT[Math.abs(to-theirKingSq)]) || ((rayTo > 0 && (rayTo != rayFrom) && !CORNERS[to])))
              node.addSlide(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
      
            continue;
          }
      
          if (toObj == EDGE)
            break;
      
          if ((toObj & COLOR_MASK) != turn) {
            if (rayTo)
              node.addCapture(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
          }
      
          break;
        }
      }
      
      //}}}
    }

    next++;
    count++
  }
}

//}}}
//{{{  .genQMoves

lozBoard.prototype.genQMoves = function(node, turn) {

  node.numMoves    = 0;
  node.sortedIndex = 0;

  var b = this.b;

  //{{{  colour based stuff
  
  if (turn == WHITE) {
  
    var pOffsetOrth  = WP_OFFSET_ORTH;
    var pOffsetDiag1 = WP_OFFSET_DIAG1;
    var pOffsetDiag2 = WP_OFFSET_DIAG2;
    var pPromoteRank = 7;
    var pList        = this.wList;
    var theirKingSq  = this.bList[0];
    var pCount       = this.wCount;
    var CAPTURE      = IS_BNK;
  }
  
  else {
  
    var pOffsetOrth  = BP_OFFSET_ORTH;
    var pOffsetDiag1 = BP_OFFSET_DIAG1;
    var pOffsetDiag2 = BP_OFFSET_DIAG2;
    var pPromoteRank = 2;
    var pList        = this.bList;
    var theirKingSq  = this.wList[0];
    var pCount       = this.bCount;
    var CAPTURE      = IS_WNK;
  }
  
  //}}}

  var next      = 0;
  var count     = 0;
  var to        = 0;
  var toObj     = 0;
  var fr        = 0;
  var frObj     = 0;
  var frPiece   = 0;
  var frMove    = 0;
  var frRank    = 0;

  while (count < pCount) {

    fr = pList[next];
    if (!fr) {
      next++;
      continue;
    }

    frObj     = b[fr];
    frPiece   = frObj & PIECE_MASK;
    frMove    = (frObj << MOVE_FROBJ_BITS) | (fr << MOVE_FR_BITS);
    frRank    = RANK[fr];

    if (frPiece == PAWN) {
      //{{{  P
      
      frMove |= MOVE_PAWN_MASK;
      
      to     = fr + pOffsetOrth;
      toObj  = b[to];
      
      if (!toObj) {
      
        if (frRank == pPromoteRank)
          node.addQPromotion(MOVE_PROMOTE_MASK | frMove | to);
      }
      
      to    = fr + pOffsetDiag1;
      toObj = b[to];
      
      if (CAPTURE[toObj]) {
      
        if (frRank == pPromoteRank)
          node.addQPromotion(MOVE_PROMOTE_MASK | frMove | (toObj << MOVE_TOOBJ_BITS) | to);
        else
          node.addQMove(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
      }
      
      else if (!toObj && to == this.ep)
        node.addQMove(MOVE_EPTAKE_MASK | frMove | to);
      
      to    = fr + pOffsetDiag2;
      toObj = b[to];
      
      if (CAPTURE[toObj]) {
      
        if (frRank == pPromoteRank)
          node.addQPromotion(MOVE_PROMOTE_MASK | frMove | (toObj << MOVE_TOOBJ_BITS) | to);
        else
          node.addQMove(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
      }
      
      else if (!toObj && to == this.ep)
        node.addQMove(MOVE_EPTAKE_MASK | frMove | to);
      
      //}}}
    }

    else if (IS_N[frObj]) {
      //{{{  N
      
      var offsets = OFFSETS[frPiece];
      var dir     = 0;
      
      while (dir < 8) {
      
        to    = fr + offsets[dir++];
        toObj = b[to];
      
        if (CAPTURE[toObj])
          node.addQMove(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
      }
      
      //}}}
    }

    else if (IS_K[frObj]) {
      //{{{  K
      
      var offsets = OFFSETS[frPiece];
      var dir     = 0;
      
      while (dir < 8) {
      
        to    = fr + offsets[dir++];
        toObj = b[to];
      
        if (CAPTURE[toObj] && !ADJACENT[Math.abs(to-theirKingSq)])
          node.addQMove(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
      }
      
      //}}}
    }

    else {
      //{{{  BRQ
      
      var offsets = OFFSETS[frPiece];
      var len     = offsets.length;
      var dir     = 0;
      
      while (dir < len) {
      
        var offset = offsets[dir++];
      
        to = fr + offset;
      
        while (!b[to])
          to += offset;
      
        toObj = b[to];
      
        if (CAPTURE[toObj])
          node.addQMove(frMove | (toObj << MOVE_TOOBJ_BITS) | to);
      }
      
      //}}}
    }

    next++;
    count++
  }
}

//}}}
//{{{  .makeMoveA

lozBoard.prototype.makeMoveA = function (node,move) {

  const b = this.b;
  const z = this.z;

  const fr      = (move & MOVE_FR_MASK   ) >>> MOVE_FR_BITS;
  const to      = (move & MOVE_TO_MASK   ) >>> MOVE_TO_BITS;
  const toObj   = (move & MOVE_TOOBJ_MASK) >>> MOVE_TOOBJ_BITS;
  const frObj   = (move & MOVE_FROBJ_MASK) >>> MOVE_FROBJ_BITS;
  const frPiece = frObj & PIECE_MASK;
  const frCol   = frObj & COLOR_MASK;
  const frColI  = frCol >>> 3;

  //{{{  slide piece
  
  b[fr] = NULL;
  b[to] = frObj;
  
  node.frZ = z[fr];
  node.toZ = z[to];
  
  z[fr] = NO_Z;
  z[to] = node.frZ;
  
  this.loHash ^= this.loPieces[frColI][frPiece-1][fr];
  this.hiHash ^= this.hiPieces[frColI][frPiece-1][fr];
  
  this.loHash ^= this.loPieces[frColI][frPiece-1][to];
  this.hiHash ^= this.hiPieces[frColI][frPiece-1][to];
  
  if (frCol == WHITE) {
    this.wList[node.frZ] = to;
  }
  
  else {
    this.bList[node.frZ] = to;
  }
  
  //}}}
  //{{{  clear rights?
  
  if (this.rights) {
  
    this.loHash ^= this.loRights[this.rights];
    this.hiHash ^= this.hiRights[this.rights];
  
    this.rights &= MASK_RIGHTS[fr] & MASK_RIGHTS[to];
  
    this.loHash ^= this.loRights[this.rights];
    this.hiHash ^= this.hiRights[this.rights];
  }
  
  //}}}
  //{{{  capture?
  
  if (toObj) {
  
    const toPiece = toObj & PIECE_MASK;
    const toCol   = toObj & COLOR_MASK;
    const toColI  = toCol >>> 3;
  
    this.loHash ^= this.loPieces[toColI][toPiece-1][to];
    this.hiHash ^= this.hiPieces[toColI][toPiece-1][to];
  
    this.phase += VPHASE[toPiece];
  
    if (toCol == WHITE) {
  
      this.wList[node.toZ] = EMPTY;
  
      this.wCounts[toPiece]--;
      this.wCount--;
    }
  
    else {
  
      this.bList[node.toZ] = EMPTY;
  
      this.bCounts[toPiece]--;
      this.bCount--;
    }
  }
  
  //}}}

  this.netPrepare(this.netCapture,frObj,fr,toObj,to);

  //{{{  reset EP
  
  this.loHash ^= this.loEP[this.ep];
  this.hiHash ^= this.hiEP[this.ep];
  
  this.ep = 0;
  
  this.loHash ^= this.loEP[this.ep];
  this.hiHash ^= this.hiEP[this.ep];
  
  //}}}

  if (move & MOVE_SPECIAL_MASK) {
    //{{{  ikky stuff
    
    if (frCol == WHITE) {
    
      const ep = to + 12;
    
      if (move & MOVE_EPMAKE_MASK) {
    
        this.netPrepare(this.netMove,frObj,fr,to);
    
        this.loHash ^= this.loEP[this.ep];
        this.hiHash ^= this.hiEP[this.ep];
    
        this.ep = ep;
    
        this.loHash ^= this.loEP[this.ep];
        this.hiHash ^= this.hiEP[this.ep];
      }
    
      else if (move & MOVE_EPTAKE_MASK) {
    
        this.netPrepare(this.netEpCapture,frObj,fr,to,B_PAWN,ep);
    
        b[ep]    = NULL;
        node.epZ = z[ep];
        z[ep]    = NO_Z;
    
        this.bList[node.epZ] = EMPTY;
    
        this.loHash ^= this.loPieces[I_BLACK][PAWN-1][ep];
        this.hiHash ^= this.hiPieces[I_BLACK][PAWN-1][ep];
    
        this.bCounts[PAWN]--;
        this.bCount--;
      }
    
      else if (move & MOVE_PROMOTE_MASK) {
    
        const pro = ((move & MOVE_PROMAS_MASK) >>> MOVE_PROMAS_BITS) + 2;  //NBRQ
        b[to]     = WHITE | pro;
    
        this.netPrepare(this.netPromote,W_PAWN,fr,to,toObj,pro|WHITE);
    
        this.loHash ^= this.loPieces[I_WHITE][PAWN-1][to];
        this.hiHash ^= this.hiPieces[I_WHITE][PAWN-1][to];
        this.loHash ^= this.loPieces[I_WHITE][pro-1][to];
        this.hiHash ^= this.hiPieces[I_WHITE][pro-1][to];
    
        this.wCounts[PAWN]--;
        this.wCounts[pro]++;
    
        this.phase -= VPHASE[pro];
      }
    
      else if (move == MOVE_E1G1) {
    
        this.netPrepare(this.netCastle,W_KING,fr,to,W_ROOK,H1,F1);
    
        b[H1] = NULL;
        b[F1] = W_ROOK;
        z[F1] = z[H1];
        z[H1] = NO_Z;
    
        this.wList[z[F1]] = F1;
    
        this.loHash ^= this.loPieces[I_WHITE][ROOK-1][H1];
        this.hiHash ^= this.hiPieces[I_WHITE][ROOK-1][H1];
        this.loHash ^= this.loPieces[I_WHITE][ROOK-1][F1];
        this.hiHash ^= this.hiPieces[I_WHITE][ROOK-1][F1];
    
      }
    
      else if (move == MOVE_E1C1) {
    
        this.netPrepare(this.netCastle,W_KING,fr,to,W_ROOK,A1,D1);
    
        b[A1] = NULL;
        b[D1] = W_ROOK;
        z[D1] = z[A1];
        z[A1] = NO_Z;
    
        this.wList[z[D1]] = D1;
    
        this.loHash ^= this.loPieces[I_WHITE][ROOK-1][A1];
        this.hiHash ^= this.hiPieces[I_WHITE][ROOK-1][A1];
        this.loHash ^= this.loPieces[I_WHITE][ROOK-1][D1];
        this.hiHash ^= this.hiPieces[I_WHITE][ROOK-1][D1];
    
      }
    }
    
    else {
    
      const ep = to - 12;
    
      if (move & MOVE_EPMAKE_MASK) {
    
        this.netPrepare(this.netMove,frObj,fr,to);
    
        this.loHash ^= this.loEP[this.ep];
        this.hiHash ^= this.hiEP[this.ep];
    
        this.ep = ep;
    
        this.loHash ^= this.loEP[this.ep];
        this.hiHash ^= this.hiEP[this.ep];
      }
    
      else if (move & MOVE_EPTAKE_MASK) {
    
        this.netPrepare(this.netEpCapture,frObj,fr,to,W_PAWN,ep);
    
        b[ep]    = NULL;
        node.epZ = z[ep];
        z[ep]    = NO_Z;
    
        this.wList[node.epZ] = EMPTY;
    
        this.loHash ^= this.loPieces[I_WHITE][PAWN-1][ep];
        this.hiHash ^= this.hiPieces[I_WHITE][PAWN-1][ep];
    
        this.wCounts[PAWN]--;
        this.wCount--;
      }
    
      else if (move & MOVE_PROMOTE_MASK) {
    
        const pro = ((move & MOVE_PROMAS_MASK) >>> MOVE_PROMAS_BITS) + 2;  //NBRQ
        b[to]     = BLACK | pro;
    
        this.netPrepare(this.netPromote,B_PAWN,fr,to,toObj,pro|BLACK);
    
        this.loHash ^= this.loPieces[I_BLACK][PAWN-1][to];
        this.hiHash ^= this.hiPieces[I_BLACK][PAWN-1][to];
        this.loHash ^= this.loPieces[I_BLACK][pro-1][to];
        this.hiHash ^= this.hiPieces[I_BLACK][pro-1][to];
    
        this.bCounts[PAWN]--;
        this.bCounts[pro]++;
    
        this.phase -= VPHASE[pro];
      }
    
      else if (move == MOVE_E8G8) {
    
        this.netPrepare(this.netCastle,B_KING,fr,to,B_ROOK,H8,F8);
    
        b[H8] = NULL;
        b[F8] = B_ROOK;
        z[F8] = z[H8];
        z[H8] = NO_Z;
    
        this.bList[z[F8]] = F8;
    
        this.loHash ^= this.loPieces[I_BLACK][ROOK-1][H8];
        this.hiHash ^= this.hiPieces[I_BLACK][ROOK-1][H8];
        this.loHash ^= this.loPieces[I_BLACK][ROOK-1][F8];
        this.hiHash ^= this.hiPieces[I_BLACK][ROOK-1][F8];
    
      }
    
      else if (move == MOVE_E8C8) {
    
        this.netPrepare(this.netCastle,B_KING,fr,to,B_ROOK,A8,D8);
    
        b[A8] = NULL;
        b[D8] = B_ROOK;
        z[D8] = z[A8];
        z[A8] = NO_Z;
    
        this.bList[z[D8]] = D8;
    
        this.loHash ^= this.loPieces[I_BLACK][ROOK-1][A8];
        this.hiHash ^= this.hiPieces[I_BLACK][ROOK-1][A8];
        this.loHash ^= this.loPieces[I_BLACK][ROOK-1][D8];
        this.hiHash ^= this.hiPieces[I_BLACK][ROOK-1][D8];
    
      }
    }
    
    //}}}
  }

  //{{{  flip turn in hash
  
  this.loHash ^= this.loTurn;
  this.hiHash ^= this.hiTurn;
  
  //}}}
  //{{{  push rep hash
  //
  // Repetitions are cancelled by pawn moves, castling, captures, EP
  // and promotions; i.e. moves that are not reversible.  The nearest
  // repetition is 5 indexes back from the current one and then that
  // and every other one entry is a possible rep.  Can also check for
  // 50 move rule by testing hi-lo > 100 - it's not perfect because of
  // the pawn move reset but it's a type 2 error, so safe.
  //
  
  this.repLoHash[this.repHi] = this.loHash;
  this.repHiHash[this.repHi] = this.hiHash;
  
  this.repHi++;
  
  if ((move & (MOVE_SPECIAL_MASK | MOVE_TOOBJ_MASK)) || frPiece == PAWN)
    this.repLo = this.repHi;
  
  //}}}
}

//}}}
//{{{  .makeMoveB

lozBoard.prototype.makeMoveB = function (node) {

  this.ueFunc(this.ueA,this.ueB,this.ueC,this.ueD,this.ueE,this.ueF);

}

//}}}
//{{{  .unmakeMove

lozBoard.prototype.unmakeMove = function (node,move) {

  const b = this.b;
  const z = this.z;

  const fr    = (move & MOVE_FR_MASK   ) >>> MOVE_FR_BITS;
  const to    = (move & MOVE_TO_MASK   ) >>> MOVE_TO_BITS;
  const toObj = (move & MOVE_TOOBJ_MASK) >>> MOVE_TOOBJ_BITS;
  const frObj = (move & MOVE_FROBJ_MASK) >>> MOVE_FROBJ_BITS;
  const frCol = frObj & COLOR_MASK;

  b[fr] = frObj;
  b[to] = toObj;

  z[fr] = node.frZ;
  z[to] = node.toZ;

  if (frCol == WHITE)
    this.wList[node.frZ] = fr;
  else
    this.bList[node.frZ] = fr;

  //{{{  capture?
  
  if (toObj) {
  
    const toPiece = toObj & PIECE_MASK;
    const toCol   = toObj & COLOR_MASK;
  
    this.phase -= VPHASE[toPiece];
  
    if (toCol == WHITE) {
  
      this.wList[node.toZ] = to;
  
      this.wCounts[toPiece]++;
      this.wCount++;
    }
  
    else {
  
      this.bList[node.toZ] = to;
  
      this.bCounts[toPiece]++;
      this.bCount++;
    }
  }
  
  //}}}

  if (move & MOVE_SPECIAL_MASK) {
    //{{{  ikky stuff
    
    if ((frObj & COLOR_MASK) == WHITE) {
    
      const ep = to + 12;
    
      if (move & MOVE_EPTAKE_MASK) {
    
        b[ep] = B_PAWN;
        z[ep] = node.epZ;
    
        this.bList[node.epZ] = ep;
    
        this.bCounts[PAWN]++;
        this.bCount++;
      }
    
      else if (move & MOVE_PROMOTE_MASK) {
    
        const pro = ((move & MOVE_PROMAS_MASK) >>> MOVE_PROMAS_BITS) + 2;  //NBRQ
    
        this.wCounts[PAWN]++;
        this.wCounts[pro]--;
    
        this.phase += VPHASE[pro];
      }
    
      else if (move == MOVE_E1G1) {
    
        b[H1] = W_ROOK;
        b[F1] = NULL;
        z[H1] = z[F1];
        z[F1] = NO_Z;
    
        this.wList[z[H1]] = H1;
      }
    
      else if (move == MOVE_E1C1) {
    
        b[A1] = W_ROOK;
        b[D1] = NULL;
        z[A1] = z[D1];
        z[D1] = NO_Z;
    
        this.wList[z[A1]] = A1;
      }
    }
    
    else {
    
      const ep = to - 12;
    
      if (move & MOVE_EPTAKE_MASK) {
    
        b[ep] = W_PAWN;
        z[ep] = node.epZ;
    
        this.wList[node.epZ] = ep;
    
        this.wCounts[PAWN]++;
        this.wCount++;
      }
    
      else if (move & MOVE_PROMOTE_MASK) {
    
        const pro = ((move & MOVE_PROMAS_MASK) >>> MOVE_PROMAS_BITS) + 2;  //NBRQ
    
        this.bCounts[PAWN]++;
        this.bCounts[pro]--;
    
        this.phase += VPHASE[pro];
      }
    
      else if (move == MOVE_E8G8) {
    
        b[H8] = B_ROOK;
        b[F8] = NULL;
        z[H8] = z[F8];
        z[F8] = NO_Z;
    
        this.bList[z[H8]] = H8;
      }
    
      else if (move == MOVE_E8C8) {
    
        b[A8] = B_ROOK;
        b[D8] = NULL;
        z[A8] = z[D8];
        z[D8] = NO_Z;
    
        this.bList[z[A8]] = A8;
      }
    }
    
    //}}}
  }
}

//}}}
//{{{  .makePseudoMove

lozBoard.prototype.makePseudoMove = function (move) {

  const b = this.b;

  const fr      = (move & MOVE_FR_MASK   ) >>> MOVE_FR_BITS;
  const to      = (move & MOVE_TO_MASK   ) >>> MOVE_TO_BITS;
  const frObj   = (move & MOVE_FROBJ_MASK) >>> MOVE_FROBJ_BITS;

  b[fr] = NULL;
  b[to] = frObj;
}

//}}}
//{{{  .unmakePseudoMove

lozBoard.prototype.unmakePseudoMove = function (move) {

  const b = this.b;

  const fr    = (move & MOVE_FR_MASK   ) >>> MOVE_FR_BITS;
  const to    = (move & MOVE_TO_MASK   ) >>> MOVE_TO_BITS;
  const frObj = (move & MOVE_FROBJ_MASK) >>> MOVE_FROBJ_BITS;

  b[fr] = frObj;
  b[to] = NULL;
}

//}}}
//{{{  .isKingAttacked

lozBoard.prototype.isKingAttacked = function(byCol) {

  return this.isAttacked((byCol == WHITE) ? this.bList[0] : this.wList[0], byCol);
}

//}}}
//{{{  .isAttacked

lozBoard.prototype.isAttacked = function(to, byCol) {

  const b  = this.b;

  var fr = 0;

  //{{{  colour stuff
  
  if (byCol == WHITE) {
  
    if (b[to+13] == W_PAWN || b[to+11] == W_PAWN)
      return 1;
  
    var RQ = IS_WRQ;
    var BQ = IS_WBQ;
  }
  
  else {
  
    if (b[to-13] == B_PAWN || b[to-11] == B_PAWN)
      return 1;
  
    var RQ = IS_BRQ;
    var BQ = IS_BBQ;
  }
  
  const knight = KNIGHT | byCol;
  const king   = KING   | byCol;
  
  //}}}

  //{{{  knights
  
  if (b[to + -10] == knight) return 1;
  if (b[to + -23] == knight) return 1;
  if (b[to + -14] == knight) return 1;
  if (b[to + -25] == knight) return 1;
  if (b[to +  10] == knight) return 1;
  if (b[to +  23] == knight) return 1;
  if (b[to +  14] == knight) return 1;
  if (b[to +  25] == knight) return 1;
  
  //}}}
  //{{{  queen, bishop, rook
  
  fr = to + 1;  while (!b[fr]) fr += 1;  if (RQ[b[fr]]) return 1;
  fr = to - 1;  while (!b[fr]) fr -= 1;  if (RQ[b[fr]]) return 1;
  fr = to + 12; while (!b[fr]) fr += 12; if (RQ[b[fr]]) return 1;
  fr = to - 12; while (!b[fr]) fr -= 12; if (RQ[b[fr]]) return 1;
  fr = to + 11; while (!b[fr]) fr += 11; if (BQ[b[fr]]) return 1;
  fr = to - 11; while (!b[fr]) fr -= 11; if (BQ[b[fr]]) return 1;
  fr = to + 13; while (!b[fr]) fr += 13; if (BQ[b[fr]]) return 1;
  fr = to - 13; while (!b[fr]) fr -= 13; if (BQ[b[fr]]) return 1;
  
  //}}}
  //{{{  kings
  
  if (b[to + -11] == king) return 1;
  if (b[to + -13] == king) return 1;
  if (b[to + -12] == king) return 1;
  if (b[to + -1 ] == king) return 1;
  if (b[to +  11] == king) return 1;
  if (b[to +  13] == king) return 1;
  if (b[to +  12] == king) return 1;
  if (b[to +  1 ] == king) return 1;
  
  //}}}

  return 0;
}


//}}}
//{{{  .evaluate

lozBoard.prototype.evaluate = function (turn) {

  //{{{  init
  
  const numPieces = this.wCount + this.bCount;
  
  const wNumQueens  = this.wCounts[QUEEN];
  const wNumRooks   = this.wCounts[ROOK];
  const wNumBishops = this.wCounts[BISHOP];
  const wNumKnights = this.wCounts[KNIGHT];
  const wNumPawns   = this.wCounts[PAWN];
  
  const bNumQueens  = this.bCounts[QUEEN];
  const bNumRooks   = this.bCounts[ROOK];
  const bNumBishops = this.bCounts[BISHOP];
  const bNumKnights = this.bCounts[KNIGHT];
  const bNumPawns   = this.bCounts[PAWN];
  
  //}}}
  //{{{  draw?
  
  //todo - lots more here and drawish.
  
  if (numPieces == 2)                                                                  // K v K.
    return 0;
  
  if (numPieces == 3 && (wNumKnights || wNumBishops || bNumKnights || bNumBishops))    // K v K+N|B.
    return 0;
  
  if (numPieces == 4 && (wNumKnights || wNumBishops) && (bNumKnights || bNumBishops))  // K+N|B v K+N|B.
    return 0;
  
  if (numPieces == 4 && (wNumKnights == 2 || bNumKnights == 2))                        // K v K+NN.
    return 0;
  
  if (numPieces == 5 && wNumKnights == 2 && (bNumKnights || bNumBishops))              //
    return 0;                                                                   //
                                                                                       // K+N|B v K+NN
  if (numPieces == 5 && bNumKnights == 2 && (wNumKnights || wNumBishops))              //
    return 0;                                                                   //
  
  if (numPieces == 5 && wNumBishops == 2 && bNumBishops)                               //
    return 0;                                                                   //
                                                                                       // K+B v K+BB
  if (numPieces == 5 && bNumBishops == 2 && wNumBishops)                               //
    return 0;                                                                   //
  
  if (numPieces == 4 && wNumRooks && bNumRooks)                                        // K+R v K+R.
    return 0;
  
  if (numPieces == 4 && wNumQueens && bNumQueens)                                      // K+Q v K+Q.
    return 0;
  
  //}}}

  if (RANDOMEVAL)  // hack
    return Math.trunc((Math.random() * 1000) - 500);
  else {
    const e1 = this.netFastEval(turn);
    return e1;
  }

}

//}}}
//{{{  .getEval
//
// Assumes eval has been initialised to INFINITY and that ttGet() has been called.
//

lozBoard.prototype.getEval = function (ev,node,turn) {

  if (ev != INFINITY)
    return ev;                     // We've already got it.

  if (node.hashEval != INFINITY)
    return node.hashEval;          // Use the TT value

  return this.evaluate(turn);      // Fallback on calulating it.
}

//}}}
//{{{  .rand32

lozBoard.prototype.rand32 = function () {

  return twisterRand();

}

//}}}
//{{{  .ttPut

lozBoard.prototype.ttPut = function (type,depth,score,move,ply,alpha,beta,ev) {

  const idx = this.loHash & TTMASK;

  if (depth == 0 && this.ttType[idx] != TT_EMPTY && this.ttDepth[idx] > 0)
    return;  // don't let qsearch tt entries overwrite search tt entries

  if (this.ttType[idx] == TT_EMPTY)
    this.hashUsed++;

  if (score <= -MINMATE && score >= -MATE)
    score -= ply;

  else if (score >= MINMATE && score <= MATE)
    score += ply;

  this.ttLo[idx]    = this.loHash;
  this.ttHi[idx]    = this.hiHash;
  this.ttType[idx]  = type;
  this.ttDepth[idx] = depth;
  this.ttScore[idx] = score;
  this.ttMove[idx]  = moveClean(move);
  this.ttEval[idx]  = ev;
}

//}}}
//{{{  .ttGet

lozBoard.prototype.ttGet = function (node, depth, alpha, beta) {

  const idx   = this.loHash & TTMASK;
  const type  = this.ttType[idx];

  node.hashMove = 0;
  node.hashEval = INFINITY;

  if (type == TT_EMPTY)
    return TTSCORE_UNKNOWN;

  const lo = this.ttLo[idx];
  const hi = this.ttHi[idx];

  if (lo != this.loHash || hi != this.hiHash)
    return TTSCORE_UNKNOWN;

  //
  // Set the hash move before the depth check
  // so that iterative deepening works.
  //

  node.hashMove = this.ttMove[idx];
  node.hashEval = this.ttEval[idx];

  if (this.ttDepth[idx] < depth)
    return TTSCORE_UNKNOWN;

  var score = this.ttScore[idx];

  if (score <= -MINMATE && score >= -MATE)
    score += node.ply;

  else if (score >= MINMATE && score <= MATE)
    score -= node.ply;

  if (type == TT_EXACT)
    return score;

  if (type == TT_ALPHA && score <= alpha)
    return score;

  if (type == TT_BETA && score >= beta)
    return score;

  return TTSCORE_UNKNOWN;
}

//}}}
//{{{  .ttGetMove

lozBoard.prototype.ttGetMove = function (node) {

  const idx = this.loHash & TTMASK;

  if (this.ttType[idx] != TT_EMPTY && this.ttLo[idx] == this.loHash && this.ttHi[idx] == this.hiHash)
    return this.ttMove[idx];

  return 0;
}

//}}}
//{{{  .ttUpdateEval

lozBoard.prototype.ttUpdateEval = function (ev) {

  const idx = this.loHash & TTMASK;

  if (this.ttType[idx] != TT_EMPTY && this.ttLo[idx] == this.loHash && this.ttHi[idx] == this.hiHash)
    this.ttEval[idx] = ev;
}

//}}}
//{{{  .ttInit

lozBoard.prototype.ttInit = function () {

  this.loHash = 0;
  this.hiHash = 0;

  this.ttType.fill(TT_EMPTY);

  this.hashUsed = 0;
}

//}}}
//{{{  .hashCheck

lozBoard.prototype.hashCheck = function (turn) {

  var loHash = 0;
  var hiHash = 0;

  if (turn) {
    loHash ^= this.loTurn;
    hiHash ^= this.hiTurn;
  }

  loHash ^= this.loRights[this.rights];
  hiHash ^= this.hiRights[this.rights];

  loHash ^= this.loEP[this.ep];
  hiHash ^= this.hiEP[this.ep];

  for (var sq=0; sq<144; sq++) {

    var obj = this.b[sq];

    if (obj == NULL || obj == EDGE)
      continue;

    var piece = obj & PIECE_MASK;
    var col   = obj & COLOR_MASK;

    loHash ^= this.loPieces[col>>>3][piece-1][sq];
    hiHash ^= this.hiPieces[col>>>3][piece-1][sq];

  }

  if (this.loHash != loHash)
    console.log('*************** LO',this.loHash,loHash);

  if (this.hiHash != hiHash)
    console.log('*************** HI',this.hiHash,hiHash);

}

//}}}
//{{{  .fen

lozBoard.prototype.fen = function (turn) {

  var fen = '';
  var n   = 0;

  for (var i=0; i < 8; i++) {
    for (var j=0; j < 8; j++) {
      var sq  = B88[i*8 + j]
      var obj = this.b[sq];
      if (obj == NULL)
        n++;
      else {
        if (n) {
          fen += '' + n;
          n = 0;
        }
        fen += UMAP[obj];
      }
    }
    if (n) {
      fen += '' + n;
      n = 0;
    }
    if (i < 7)
      fen += '/';
  }

  if (turn == WHITE)
    fen += ' w';
  else
    fen += ' b';

  if (this.rights) {
    fen += ' ';
    if (this.rights & WHITE_RIGHTS_KING)
      fen += 'K';
    if (this.rights & WHITE_RIGHTS_QUEEN)
      fen += 'Q';
    if (this.rights & BLACK_RIGHTS_KING)
      fen += 'k';
    if (this.rights & BLACK_RIGHTS_QUEEN)
      fen += 'q';
  }
  else
    fen += ' -';

  if (this.ep)
    fen += ' ' + COORDS[this.ep];
  else
    fen += ' -';

  fen += ' 0 1';

  return fen;
}

//}}}
//{{{  .quickSee

const QS = [0,0,3,3,5,9,0];

lozBoard.prototype.quickSee = function (turn, move) {

  if (move & MOVE_SPECIAL_MASK)
    return 0;

  const frObj = moveFromObj(move);
  const frPiece = objPiece(frObj);

  if (frPiece == PAWN)
    return 0;

  const toObj = moveToObj(move);
  const to    = moveToSq(move);

  const cx = colourIndex(turn);

  const nextTurn = colourToggle(turn);

  const p1 = this.b[to + WB_OFFSET_DIAG1[cx]] == (PAWN | nextTurn);
  const p2 = this.b[to + WB_OFFSET_DIAG2[cx]] == (PAWN | nextTurn);

  if (!toObj && (p1 || p2))
    return -1;

  const toPiece = objPiece(toObj);
  const dodgy   = QS[frPiece] > QS[toPiece];

  if (dodgy && (p1 || p2))
    return -1;

  return 0;
}

//}}}
//{{{  .getPVStr

lozBoard.prototype.getPVStr = function (node, move, depth) {

  if (!node || !depth)
    return '';

  if (!move)
    move = this.ttGetMove(node);

  if (!move)
    return '';

  node.cache();
  this.makeMoveA(node,move);

  const mv = formatMove(move, this.mvFmt);
  const pv = ' ' + this.getPVStr(node.childNode, 0, depth-1);

  this.unmakeMove(node, move);
  node.uncacheA();

  return mv + pv;

}

//}}}
//{{{  .addHistory

lozBoard.prototype.addHistory = function (x, move) {

  const to    = (move & MOVE_TO_MASK)    >>> MOVE_TO_BITS;
  const frObj = (move & MOVE_FROBJ_MASK) >>> MOVE_FROBJ_BITS;

  this.objHistory[frObj][to] += x;

}

//}}}
//{{{  .betaMate

lozBoard.prototype.betaMate = function (score) {

  return (score >= MINMATE && score <= MATE);

}

//}}}
//{{{  .alphaMate

lozBoard.prototype.alphaMate = function (score) {

  return (score <= -MINMATE && score >= -MATE);

}

//}}}
//{{{  .cleanPhase

lozBoard.prototype.cleanPhase = function (p) {

  if (p <= 0)            // because of say 3 queens early on.
    return 0;

  else if (p >= TPHASE)  // jic.
    return TPHASE;

  return p;

}

//}}}
//{{{  .isDraw

lozBoard.prototype.isDraw = function () {

  if (this.repHi - this.repLo > 100)
    return true;

  for (let i=this.repHi-5; i >= this.repLo; i -= 2) {

    if (this.repLoHash[i] == this.loHash && this.repHiHash[i] == this.hiHash)
      return true;

  }

  const numPieces = this.wCount + this.bCount;

  if (numPieces == 2)
    return true;

  const wNumBishops = this.wCounts[BISHOP];
  const wNumKnights = this.wCounts[KNIGHT];

  const bNumBishops = this.bCounts[BISHOP];
  const bNumKnights = this.bCounts[KNIGHT];

  if (numPieces == 3 && (wNumKnights || wNumBishops || bNumKnights || bNumBishops))
    return true;

  return false;

}

//}}}
//{{{  .netReset

lozBoard.prototype.netReset = function () {

  this.net_h1_a.set(this.net_h1_b);
  this.net_h2_a.set(this.net_h1_b);

}

//}}}
//{{{  .netUpdate

lozBoard.prototype.netUpdate = function (turn) {

  const b  = this.b;
  const cx = colourMultiplier(turn)

  this.netReset();

  for (let sq=0; sq<64; sq++) {

    const fr    = B88[sq];
    const frObj = b[fr];

    if (!frObj)
      continue;

    const i1 = IMAP[frObj][fr];

    for (let h=0; h < net_h1_size; h++) {
      this.net_h1_a[h] += this.net_h1_w[i1][h];
      this.net_h2_a[h] += this.net_h2_w[i1][h];
    }
  }

}

//}}}
//{{{  .netSlowEval
//
// Used to check UE.
//

lozBoard.prototype.netSlowEval = function (turn) {

  this.hashCheck(turn);

  const b = this.b;

  let wAcc = new Int16Array(net_h1_size);
  let bAcc = new Int16Array(net_h1_size);

  wAcc.set(this.net_h1_b);
  bAcc.set(this.net_h1_b);

  for (let sq=0; sq<64; sq++) {

    const fr    = B88[sq];
    const frObj = b[fr];

    if (!frObj)
      continue;

    const i1 = IMAP[frObj][fr];

    for (let i=0; i < net_h1_size; i++) {
      wAcc[i] += this.net_h1_w[i1][i];
      bAcc[i] += this.net_h2_w[i1][i];
    }
  }

  let e = 0;

  if (turn == WHITE) {
    var a1 = wAcc;
    var a2 = bAcc;
  }
  else {
    var a1 = bAcc;
    var a2 = wAcc;
  }

  for (let i=0; i < net_h1_size; i++) {
    e += this.net_o_w[i]             * sqrrelu(a1[i]);
    e += this.net_o_w[i+net_h1_size] * sqrrelu(a2[i]);
  }

  e /= net_quantise_a;
  e += this.net_o_b;
  e *= net_scale;
  e /= net_quantise_ab;

  return e | 0;
}

//}}}
//{{{  .netFastEval

lozBoard.prototype.netFastEval = function (turn) {

  const a  = this.net_a[colourIndex(turn)];
  const a1 = a[0];
  const a2 = a[1];

  let e = 0;

  for (let i=0; i < net_h1_size; i++) {
    e += this.net_o_w[i]             * sqrrelu(a1[i]);
    e += this.net_o_w[i+net_h1_size] * sqrrelu(a2[i]);
  }

  e /= net_quantise_a;
  e += this.net_o_b;
  e *= net_scale;
  e /= net_quantise_ab;

  return e | 0;
}

//}}}
//{{{  .netPrepare
//
// Note the UE needed so it can be done after a legal move is confirmed.
//

lozBoard.prototype.netPrepare = function (ueFunc,ueA,ueB,ueC,ueD,ueE,ueF) {

  this.ueFunc = ueFunc;

  this.ueA = ueA;
  this.ueB = ueB;
  this.ueC = ueC;
  this.ueD = ueD;
  this.ueE = ueE;
  this.ueF = ueF;

}

//}}}
//{{{  .netMove

lozBoard.prototype.netMove = function (frObj,fr,to,dx,ex,fx) {

  const i1 = IMAP[frObj][fr];
  const i2 = IMAP[frObj][to];

  const h1a = this.net_h1_w[i1];
  const h1b = this.net_h1_w[i2];

  const h2a = this.net_h2_w[i1];
  const h2b = this.net_h2_w[i2];

  for (let h=0; h < net_h1_size; h++) {
    this.net_h1_a[h] += h1b[h] - h1a[h];
    this.net_h2_a[h] += h2b[h] - h2a[h];
  }
}

//}}}
//{{{  .netCapture

lozBoard.prototype.netCapture = function (frObj,fr,toObj,to,ex,fx) {

  const i1 = IMAP[frObj][fr];
  const i2 = IMAP[toObj][to];
  const i3 = IMAP[frObj][to];

  const h1a = this.net_h1_w[i1];
  const h1b = this.net_h1_w[i2];
  const h1c = this.net_h1_w[i3];

  const h2a = this.net_h2_w[i1];
  const h2b = this.net_h2_w[i2];
  const h2c = this.net_h2_w[i3];

  for (let h=0; h < net_h1_size; h++) {
    this.net_h1_a[h] += h1c[h] - h1b[h] - h1a[h];
    this.net_h2_a[h] += h2c[h] - h2b[h] - h2a[h];
  }
}

//}}}
//{{{  .netPromote

lozBoard.prototype.netPromote = function (pawnObj,pawnFr,pawnTo,captureObj,promoteObj,fx) {

  const i1 = IMAP[pawnObj][pawnFr];
  const i2 = IMAP[captureObj][pawnTo];
  const i3 = IMAP[promoteObj][pawnTo];

  const h1a = this.net_h1_w[i1];
  const h1b = this.net_h1_w[i2];
  const h1c = this.net_h1_w[i3];

  const h2a = this.net_h2_w[i1];
  const h2b = this.net_h2_w[i2];
  const h2c = this.net_h2_w[i3];

  for (let h=0; h < net_h1_size; h++) {
    this.net_h1_a[h] += h1c[h] - h1b[h] - h1a[h];
    this.net_h2_a[h] += h2c[h] - h2b[h] - h2a[h];
  }
}

//}}}
//{{{  .netEpCapture

lozBoard.prototype.netEpCapture = function (pawnObj,pawnFr,pawnTo,pawnCaptureObj,ep,fx) {

  const i1 = IMAP[pawnObj][pawnFr];
  const i2 = IMAP[pawnObj][pawnTo];
  const i3 = IMAP[pawnCaptureObj][ep];

  const h1a = this.net_h1_w[i1];
  const h1b = this.net_h1_w[i2];
  const h1c = this.net_h1_w[i3];

  const h2a = this.net_h2_w[i1];
  const h2b = this.net_h2_w[i2];
  const h2c = this.net_h2_w[i3];

  for (let h=0; h < net_h1_size; h++) {
    this.net_h1_a[h] += h1b[h] - h1a[h] - h1c[h];
    this.net_h2_a[h] += h2b[h] - h2a[h] - h2c[h];
  }
}

//}}}
//{{{  .netCastle

lozBoard.prototype.netCastle = function (kingObj,kingFr,kingTo,rookObj,rookFr,rookTo) {

  const i1 = IMAP[kingObj][kingFr];
  const i2 = IMAP[kingObj][kingTo];
  const i3 = IMAP[rookObj][rookFr];
  const i4 = IMAP[rookObj][rookTo];

  const h1a = this.net_h1_w[i1];
  const h1b = this.net_h1_w[i2];
  const h1c = this.net_h1_w[i3];
  const h1d = this.net_h1_w[i4];

  const h2a = this.net_h2_w[i1];
  const h2b = this.net_h2_w[i2];
  const h2c = this.net_h2_w[i3];
  const h2d = this.net_h2_w[i4];

  for (let h=0; h < net_h1_size; h++) {
    this.net_h1_a[h] += h1b[h] - h1a[h] + h1d[h] - h1c[h];
    this.net_h2_a[h] += h2b[h] - h2a[h] + h2d[h] - h2c[h];
  }
}

//}}}
//{{{  .netLoad
//
// Copy the weights so that the buffer can be released.
//

lozBoard.prototype.netLoad = async function () {

  let offset = 0;
	
	const response = await fetch(net_weights_file);
	const arrayBuffer = await response.arrayBuffer();
	const dataView = new Int16Array(arrayBuffer, offset);

  //{{{  .net_h1/h2_w
  
  for (let i=0; i < net_i_size; i++) {
  
    const lozIndex = bullet2lozza(i);  // map bullet to lozza input indexes.
    const h        = i * net_h1_size;
  
    for (let j=0; j < net_h1_size; j++) {
      this.net_h1_w[lozIndex][j] = dataView[h + j];
    }
  }
  
  //}}}
  //{{{  .net_h1_b
  
  offset += net_i_size * net_h1_size;
  
  for (let i=0; i < net_h1_size; i++) {
    this.net_h1_b[i] = dataView[offset + i];
  }
  
  //}}}
  //{{{  .net_o_w
  
  offset += net_h1_size;
  
  for (let i=0; i < net_h1_size*2; i++) {
    this.net_o_w[i] = dataView[offset + i];
  }
  
  //}}}
  //{{{  .net_o_b
  
  offset += net_h1_size * 2;
  
  this.net_o_b = dataView[offset];
  
  //}}}
	postMessage('A.C.A.S Load');
}

//}}}
//{{{  .netSerialise

lozBoard.prototype.netSerialise = function () {

  console.log('{{{  weights');

  let w = [];
  console.log('let w = [];');


  for (let i=0; i < net_i_size; i++) {
    console.log('{{{  h1_w ' + i);
    console.log('w = this.net_h1_w[' + i + '];');
    w = this.net_h1_w[i];
    for (let j=0; j < net_h1_size; j++) {
      console.log('w[' + j + '] = ' + w[j] + ';');
    }
    console.log('}}}');
  }

  console.log('{{{  h1_b ');
  console.log('w = this.net_h1_b;');
  w = this.net_h1_b;
  for (let j=0; j < net_h1_size; j++) {
    console.log('w[' + j + '] = ' + w[j] + ';');
  }
  console.log('}}}');

  console.log('{{{  o_w ');
  console.log('w = this.net_o_w;');
  w = this.net_o_w;
  for (let j=0; j < net_h1_size*2; j++) {
    console.log('w[' + j + '] = ' + w[j] + ';');
  }
  console.log('}}}');

  console.log('this.net_o_b = ' + this.net_o_b + ';');

  console.log('}}}');
}

//}}}
//{{{  .netInitWeights

lozBoard.prototype.netInitWeights = function () {
}

//}}}

//}}}
//{{{  lozNode class

//{{{  lozNode

function lozNode (parentNode) {

  this.ply        = 0;          // distance from root
  this.root       = false;      // only true for the root node node[0]
  this.childNode  = null;       // pointer to next node (towards leaf) in tree
  this.parentNode = parentNode; // pointer previous node (towards root) in tree

  if (parentNode) {
    this.grandparentNode = parentNode.parentNode;
    parentNode.childNode = this;
  }
  else
    this.grandparentNode = null;

  this.moves = new Uint32Array(MAX_MOVES);
  this.ranks = Array(MAX_MOVES);

  for (var i=0; i < MAX_MOVES; i++) {
    this.moves[i] = 0;
    this.ranks[i] = 0;
  }

  this.killer1     = 0;
  this.killer2     = 0;
  this.mateKiller  = 0;
  this.numMoves    = 0;         // number of pseudo-legal moves for this node
  this.sortedIndex = 0;         // index to next selection-sorted pseudo-legal move
  this.hashMove    = 0;         // loaded when we look up the tt
  this.hashEval    = 0;         // loaded when we look up the tt
  this.base        = 0;         // move type base (e.g. good capture) - can be used for LMR
  this.inCheck     = 0;
  this.ev          = 0;

  this.net_h1_a = new Int16Array(net_h1_size);
  this.net_h2_a = new Int16Array(net_h1_size);

  this.C_rights       = 0;
  this.C_ep           = 0;
  this.C_repLo        = 0;
  this.C_repHi        = 0;
  this.C_loHash       = 0;
  this.C_hiHash       = 0;

  this.toZ = 0;                 // move to square index (captures) to piece list - cached during make|unmakeMove
  this.frZ = 0;                 // move from square index to piece list          - ditto
  this.epZ = 0;                 // captured ep pawn index to piece list          - ditto
}

//}}}
//{{{  .init
//
// By storing the killers in the node, we are implicitly using depth from root, rather than
// depth, which can jump around all over the place and is inappropriate to use for killers.
//

lozNode.prototype.init = function() {

  this.killer1      = 0;
  this.killer2      = 0;
  this.mateKiller   = 0;
  this.numMoves     = 0;
  this.sortedIndex  = 0;
  this.hashMove     = 0;
  this.base         = 0;
  this.inCheck      = 0;

  this.toZ = 0;
  this.frZ = 0;
  this.epZ = 0;
}

//}}}
//{{{  .cache
//
// We cache the board before move generation (those elements not done in unmakeMove)
// and restore after each unmakeMove.
//

lozNode.prototype.cache = function() {

  const board = this.board;

  this.C_rights = board.rights;
  this.C_ep     = board.ep;
  this.C_repLo  = board.repLo;
  this.C_repHi  = board.repHi;
  this.C_loHash = board.loHash;
  this.C_hiHash = board.hiHash;

  this.net_h1_a.set(board.net_h1_a);
  this.net_h2_a.set(board.net_h2_a);
}

//}}}
//{{{  .uncacheA

lozNode.prototype.uncacheA = function() {

  const board = this.board;

  board.rights = this.C_rights;
  board.ep     = this.C_ep;
  board.repLo  = this.C_repLo;
  board.repHi  = this.C_repHi;
  board.loHash = this.C_loHash;
  board.hiHash = this.C_hiHash;

}

//}}}
//{{{  .uncacheB

lozNode.prototype.uncacheB = function() {

  const board = this.board;

  board.net_h1_a.set(this.net_h1_a);
  board.net_h2_a.set(this.net_h2_a);

}

//}}}
//{{{  .getNextMove

lozNode.prototype.getNextMove = function () {

  if (this.sortedIndex == this.numMoves)
    return 0;

  var maxR = -INFINITY;
  var maxI = 0;

  for (var i=this.sortedIndex; i < this.numMoves; i++) {
    if (this.ranks[i] > maxR) {
      maxR = this.ranks[i];
      maxI = i;
    }
  }

  var maxM = this.moves[maxI]

  this.moves[maxI] = this.moves[this.sortedIndex];
  this.ranks[maxI] = this.ranks[this.sortedIndex];

  this.base = maxR;

  this.sortedIndex++;

  return maxM;
}

//}}}
//{{{  .addSlide

lozNode.prototype.addSlide = function (move) {

  const m = moveClean(move);
  const n = this.numMoves++;

  this.moves[n] = move;

  if (m == this.hashMove)
    this.ranks[n] = BASE_HASH;

  else if (m == this.mateKiller)
    this.ranks[n] = BASE_MATEKILLER;

  else if (m == this.killer1)
    this.ranks[n] = BASE_MYKILLERS + 1;

  else if (m == this.killer2)
    this.ranks[n] = BASE_MYKILLERS;

  else if (this.grandparentNode && m == this.grandparentNode.killer1)
    this.ranks[n] = BASE_GPKILLERS + 1;

  else if (this.grandparentNode && m == this.grandparentNode.killer2)
    this.ranks[n] = BASE_GPKILLERS;

  else
    this.ranks[n] = this.slideBase(move);
}

//}}}
//{{{  .slideBase

lozNode.prototype.slideBase = function (move) {

    const to      = (move & MOVE_TO_MASK)    >>> MOVE_TO_BITS;
    const fr      = (move & MOVE_FR_MASK)    >>> MOVE_FR_BITS;
    const frObj   = (move & MOVE_FROBJ_MASK) >>> MOVE_FROBJ_BITS;
    const frPiece = frObj & PIECE_MASK;
    const frCol   = frObj & COLOR_MASK;

    if (frCol == WHITE) {
      var pst = WM_PST[frPiece];
      var his = this.board.wHistory[frPiece][to];
    }
    else {
      var pst = BM_PST[frPiece];
      var his = this.board.bHistory[frPiece][to];
    }

    if (!his)
      return BASE_PSTSLIDE + pst[to] - pst[fr];

    else
      return BASE_HISSLIDE + his;
}

//}}}
//{{{  .addCastle

lozNode.prototype.addCastle = function (move) {

  const m = moveClean(move);
  const n = this.numMoves++;

  this.moves[n] = move;

  if (m == this.hashMove)
    this.ranks[n] = BASE_HASH;

  else if (m == this.mateKiller)
    this.ranks[n] = BASE_MATEKILLER;

  else if (m == this.killer1)
    this.ranks[n] = BASE_MYKILLERS + 1;

  else if (m == this.killer2)
    this.ranks[n] = BASE_MYKILLERS;

  else if (this.grandparentNode && m == this.grandparentNode.killer1)
    this.ranks[n] = BASE_GPKILLERS + 1;

  else if (this.grandparentNode && m == this.grandparentNode.killer2)
    this.ranks[n] = BASE_GPKILLERS;

  else
    this.ranks[n] = BASE_CASTLING;
}

//}}}
//{{{  .addCapture

lozNode.prototype.addCapture = function (move) {

  const m = moveClean(move);
  const n = this.numMoves++;

  this.moves[n] = move;

  if (m == this.hashMove)
    this.ranks[n] = BASE_HASH;

  else {

    var victim = RANK_VECTOR[((move & MOVE_TOOBJ_MASK) >>> MOVE_TOOBJ_BITS) & PIECE_MASK];
    var attack = RANK_VECTOR[((move & MOVE_FROBJ_MASK) >>> MOVE_FROBJ_BITS) & PIECE_MASK];

    if (victim > attack)
      this.ranks[n] = BASE_GOODTAKES + victim * 64 - attack;

    else if (victim == attack)
      this.ranks[n] = BASE_EVENTAKES + victim * 64 - attack;

    else {

      if (m == this.mateKiller)
        this.ranks[n] = BASE_MATEKILLER;

      else if (m == this.killer1)
        this.ranks[n] = BASE_MYKILLERS + 1;

      else if (m == this.killer2)
        this.ranks[n] = BASE_MYKILLERS;

      else if (this.grandparentNode && m == this.grandparentNode.killer1)
        this.ranks[n] = BASE_GPKILLERS + 1;

      else if (this.grandparentNode && m == this.grandparentNode.killer2)
        this.ranks[n] = BASE_GPKILLERS;

      else
        this.ranks[n] = BASE_BADTAKES  + victim * 64 - attack;
    }
  }
}

//}}}
//{{{  .addPromotion

lozNode.prototype.addPromotion = function (move) {

  const m = moveClean(move);

  var n = 0;

  n             = this.numMoves++;
  this.moves[n] = move | QPRO;
  if ((m | QPRO) == this.hashMove)
    this.ranks[n] = BASE_HASH;
  else
    this.ranks[n] = BASE_PROMOTES + QUEEN;

  n             = this.numMoves++;
  this.moves[n] = move | RPRO;
  if ((m | RPRO) == this.hashMove)
    this.ranks[n] = BASE_HASH;
  else
    this.ranks[n] = BASE_PROMOTES + ROOK;

  n             = this.numMoves++;
  this.moves[n] = move | BPRO;
  if ((m | BPRO) == this.hashMove)
    this.ranks[n] = BASE_HASH;
  else
    this.ranks[n] = BASE_PROMOTES + BISHOP;

  n             = this.numMoves++;
  this.moves[n] = move | NPRO;
  if ((m | NPRO) == this.hashMove)
    this.ranks[n] = BASE_HASH;
  else
    this.ranks[n] = BASE_PROMOTES + KNIGHT;
}

//}}}
//{{{  .addEPTake

lozNode.prototype.addEPTake = function (move) {

  const m = moveClean(move);
  const n = this.numMoves++;

  this.moves[n] = move | MOVE_EPTAKE_MASK;

  if ((m | MOVE_EPTAKE_MASK) == this.hashMove)
    this.ranks[n] = BASE_HASH;
  else
    this.ranks[n] = BASE_EPTAKES;
}

//}}}
//{{{  .addQMove

lozNode.prototype.addQMove = function (move) {

  const m = moveClean(move);
  const n = this.numMoves++;

  this.moves[n] = move;

  if (m == this.hashMove)
    this.ranks[n] = BASE_HASH;

  else if (move & MOVE_PROMOTE_MASK)
    this.ranks[n] = BASE_PROMOTES + ((move & MOVE_PROMAS_MASK) >>> MOVE_PROMAS_BITS);  // QRBN

  else if (move & MOVE_EPTAKE_MASK)
    this.ranks[n] = BASE_EPTAKES;

  else {
    const victim = RANK_VECTOR[((move & MOVE_TOOBJ_MASK) >>> MOVE_TOOBJ_BITS) & PIECE_MASK];
    const attack = RANK_VECTOR[((move & MOVE_FROBJ_MASK) >>> MOVE_FROBJ_BITS) & PIECE_MASK];

    if (victim > attack)
      this.ranks[n] = BASE_GOODTAKES + victim * 64 - attack;

    else if (victim == attack)
      this.ranks[n] = BASE_EVENTAKES + victim * 64 - attack;

    else
      this.ranks[n] = BASE_BADTAKES + victim * 64 - attack;
  }
}

//}}}
//{{{  .addQPromotion

lozNode.prototype.addQPromotion = function (move) {

  this.addQMove (move | (QUEEN-2)  << MOVE_PROMAS_BITS);
  this.addQMove (move | (ROOK-2)   << MOVE_PROMAS_BITS);
  this.addQMove (move | (BISHOP-2) << MOVE_PROMAS_BITS);
  this.addQMove (move | (KNIGHT-2) << MOVE_PROMAS_BITS);
}

//}}}
//{{{  .addKiller

lozNode.prototype.addKiller = function (score, move) {

  move = moveClean(move);

  if (move == this.hashMove)
    return;

  if (move & (MOVE_EPTAKE_MASK | MOVE_PROMOTE_MASK))
    return;  // before killers in move ordering.

  if (move & MOVE_TOOBJ_MASK) {

    var victim = RANK_VECTOR[((move & MOVE_TOOBJ_MASK) >>> MOVE_TOOBJ_BITS) & PIECE_MASK];
    var attack = RANK_VECTOR[((move & MOVE_FROBJ_MASK) >>> MOVE_FROBJ_BITS) & PIECE_MASK];

    if (victim >= attack)
      return; // before killers in move ordering.
  }

  if (score >= MINMATE && score <= MATE) {
    this.mateKiller = move;
    if (this.killer1 == move)
      this.killer1 = 0;
    if (this.killer2 == move)
      this.killer2 = 0;
    return;
  }

  if (this.killer1 == move || this.killer2 == move) {
    return;
  }

  if (this.killer1 == 0) {
    this.killer1 = move;
    return;
  }

  if (this.killer2 == 0) {
    this.killer2 = move;
    return;
  }

  const tmp    = this.killer1;
  this.killer1 = move;
  this.killer2 = tmp;
}

//}}}

//}}}
//{{{  lozStats class

//{{{  lozStats

function lozStats () {
}

//}}}
//{{{  .init

lozStats.prototype.init = function () {

  this.startTime = now();
  this.nodes     = 0;  // per analysis
  this.ply       = 0;  // current ID root ply
  this.moveTime  = 0;
  this.maxNodes  = 0;
  this.timeOut   = 0;
  this.selDepth  = 0;
  this.bestMove  = 0;
  this.bestScore = 0;
}

//}}}
//{{{  .checkTime

lozStats.prototype.checkTime = function () {

  if (this.bestMove && this.moveTime > 0 && ((now() - this.startTime) > this.moveTime))
    this.timeOut = 1;

  if (this.bestMove && this.maxNodes > 0 && this.nodes >= this.maxNodes * 10)
    this.timeOut = 1;
}

//}}}
//{{{  .nodeStr

lozStats.prototype.nodeStr = function () {

  var tim = now() - this.startTime;
  var nps = (this.nodes * 1000) / tim | 0;

  return 'nodes ' + this.nodes + ' time ' + tim + ' nps ' + nps;
}

//}}}
//{{{  .stop

lozStats.prototype.stop = function () {

  this.stopTime  = now();
  this.time      = this.stopTime - this.startTime;
  this.timeSec   = myround(this.time / 100) / 10;
  this.nodesMega = myround(this.nodes / 100000) / 10;
}

//}}}

//}}}
//{{{  lozUCI class

//{{{  lozUCI

function lozUCI () {

  this.message   = '';
  this.tokens    = [];
  this.command   = '';
  this.spec      = {};
  this.debugging = false;
  this.nodefs    = 0;
  this.numMoves  = 0;

  this.options = {};
}

//}}}
//{{{  .argv

lozUCI.prototype.argv = function () {

  if (process.argv.length > 2) {
    for (let i=2; i < process.argv.length; i++)
      docmd(process.argv[i]);
  }

}

//}}}
//{{{  .post

lozUCI.prototype.post = function (s) {
	s = s.trim();
	
  if (SILENT)
    return;

  if (lozzaHost == HOST_NODEJS)
    this.nodefs.writeSync(1, s + '\n');

  else if (lozzaHost == HOST_WEB)
    postMessage(s);

  else
    console.log(s);
}

//}}}
//{{{  .send

lozUCI.prototype.send = function () {

  var s = '';

  for (var i = 0; i < arguments.length; i++)
    s += arguments[i] + ' ';

  this.post(s);
}

//}}}
//{{{  .debug

lozUCI.prototype.debug = function () {

  if (!this.debugging)
    return;

  var s = '';

  for (var i = 0; i < arguments.length; i++)
    s += arguments[i] + ' ';

  s = s.trim();

  if (s)
    this.post('info string debug ' + this.spec.id + ' ' + s);
  else
    this.post('info string debug ');
}

//}}}
//{{{  .getInt

lozUCI.prototype.getInt = function (key, def) {

  for (var i=0; i < this.tokens.length; i++)
    if (this.tokens[i] == key)
      if (i < this.tokens.length - 1)
        return parseInt(this.tokens[i+1]);

  return def;
}

//}}}
//{{{  .getStr

lozUCI.prototype.getStr = function (key, def) {

  for (var i=0; i < this.tokens.length; i++)
    if (this.tokens[i] == key)
      if (i < this.tokens.length - 1)
        return this.tokens[i+1];

  return def;
}

//}}}
//{{{  .getArr

lozUCI.prototype.getArr = function (key, to) {

  var lo = 0;
  var hi = 0;

  for (var i=0; i < this.tokens.length; i++) {
    if (this.tokens[i] == key) {
      lo = i + 1;  //assumes at least one item
      hi = lo;
      for (var j=lo; j < this.tokens.length; j++) {
        if (this.tokens[j] == to)
          break;
        hi = j;
      }
    }
  }

  return {lo:lo, hi:hi};
}

//}}}
//{{{  .onmessage

//{{{  bench fens

const BENCHFENS = [

"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR b KQkQ - 0 1",
"r3k2r/2pb1ppp/2pp1q2/p7/1nP1B3/1P2P3/P2N1PPP/R2QK2R w KQkq a6 0 14",
"4rrk1/2p1b1p1/p1p3q1/4p3/2P2n1p/1P1NR2P/PB3PP1/3R1QK1 b - - 2 24",
"r3qbrk/6p1/2b2pPp/p3pP1Q/PpPpP2P/3P1B2/2PB3K/R5R1 w - - 16 42",
"6k1/1R3p2/6p1/2Bp3p/3P2q1/P7/1P2rQ1K/5R2 b - - 4 44",
"8/8/1p2k1p1/3p3p/1p1P1P1P/1P2PK2/8/8 w - - 3 54",
"7r/2p3k1/1p1p1qp1/1P1Bp3/p1P2r1P/P7/4R3/Q4RK1 w - - 0 36",
"r1bq1rk1/pp2b1pp/n1pp1n2/3P1p2/2P1p3/2N1P2N/PP2BPPP/R1BQ1RK1 b - - 2 10",
"3r3k/2r4p/1p1b3q/p4P2/P2Pp3/1B2P3/3BQ1RP/6K1 w - - 3 87",
"2r4r/1p4k1/1Pnp4/3Qb1pq/8/4BpPp/5P2/2RR1BK1 w - - 0 42",
"4q1bk/6b1/7p/p1p4p/PNPpP2P/KN4P1/3Q4/4R3 b - - 0 37",
"2q3r1/1r2pk2/pp3pp1/2pP3p/P1Pb1BbP/1P4Q1/R3NPP1/4R1K1 w - - 2 34",
"1r2r2k/1b4q1/pp5p/2pPp1p1/P3Pn2/1P1B1Q1P/2R3P1/4BR1K b - - 1 37",
"r3kbbr/pp1n1p1P/3ppnp1/q5N1/1P1pP3/P1N1B3/2P1QP2/R3KB1R b KQkq b3 0 17",
"8/6pk/2b1Rp2/3r4/1R1B2PP/P5K1/8/2r5 b - - 16 42",
"1r4k1/4ppb1/2n1b1qp/pB4p1/1n1BP1P1/7P/2PNQPK1/3RN3 w - - 8 29",
"8/p2B4/PkP5/4p1pK/4Pb1p/5P2/8/8 w - - 29 68",
"3r4/ppq1ppkp/4bnp1/2pN4/2P1P3/1P4P1/PQ3PBP/R4K2 b - - 2 20",
"5rr1/4n2k/4q2P/P1P2n2/3B1p2/4pP2/2N1P3/1RR1K2Q w - - 1 49",
"1r5k/2pq2p1/3p3p/p1pP4/4QP2/PP1R3P/6PK/8 w - - 1 51",
"q5k1/5ppp/1r3bn1/1B6/P1N2P2/BQ2P1P1/5K1P/8 b - - 2 34",
"r1b2k1r/5n2/p4q2/1ppn1Pp1/3pp1p1/NP2P3/P1PPBK2/1RQN2R1 w - - 0 22",
"r1bqk2r/pppp1ppp/5n2/4b3/4P3/P1N5/1PP2PPP/R1BQKB1R w KQkq - 0 5",
"r1bqr1k1/pp1p1ppp/2p5/8/3N1Q2/P2BB3/1PP2PPP/R3K2n b Q - 1 12",
"r1bq2k1/p4r1p/1pp2pp1/3p4/1P1B3Q/P2B1N2/2P3PP/4R1K1 b - - 2 19",
"r4qk1/6r1/1p4p1/2ppBbN1/1p5Q/P7/2P3PP/5RK1 w - - 2 25",
"r7/6k1/1p6/2pp1p2/7Q/8/p1P2K1P/8 w - - 0 32",
"r3k2r/ppp1pp1p/2nqb1pn/3p4/4P3/2PP4/PP1NBPPP/R2QK1NR w KQkq - 1 5",
"3r1rk1/1pp1pn1p/p1n1q1p1/3p4/Q3P3/2P5/PP1NBPPP/4RRK1 w - - 0 12",
"5rk1/1pp1pn1p/p3Brp1/8/1n6/5N2/PP3PPP/2R2RK1 w - - 2 20",
"8/1p2pk1p/p1p1r1p1/3n4/8/5R2/PP3PPP/4R1K1 b - - 3 27",
"8/4pk2/1p1r2p1/p1p4p/Pn5P/3R4/1P3PP1/4RK2 w - - 1 33",
"8/5k2/1pnrp1p1/p1p4p/P6P/4R1PK/1P3P2/4R3 b - - 1 38",
"8/8/1p1kp1p1/p1pr1n1p/P6P/1R4P1/1P3PK1/1R6 b - - 15 45",
"8/8/1p1k2p1/p1prp2p/P2n3P/6P1/1P1R1PK1/4R3 b - - 5 49",
"8/8/1p4p1/p1p2k1p/P2npP1P/4K1P1/1P6/3R4 w - - 6 54",
"8/8/1p4p1/p1p2k1p/P2n1P1P/4K1P1/1P6/6R1 b - - 6 59",
"8/5k2/1p4p1/p1pK3p/P2n1P1P/6P1/1P6/4R3 b - - 14 63",
"8/1R6/1p1K1kp1/p6p/P1p2P1P/6P1/1Pn5/8 w - - 0 67",
"1rb1rn1k/p3q1bp/2p3p1/2p1p3/2P1P2N/PP1RQNP1/1B3P2/4R1K1 b - - 4 23",
"4rrk1/pp1n1pp1/q5p1/P1pP4/2n3P1/7P/1P3PB1/R1BQ1RK1 w - - 3 22",
"r2qr1k1/pb1nbppp/1pn1p3/2ppP3/3P4/2PB1NN1/PP3PPP/R1BQR1K1 w - - 4 12",
"2r2k2/8/4P1R1/1p6/8/P4K1N/7b/2B5 b - - 0 55",
"6k1/5pp1/8/2bKP2P/2P5/p4PNb/B7/8 b - - 1 44",
"2rqr1k1/1p3p1p/p2p2p1/P1nPb3/2B1P3/5P2/1PQ2NPP/R1R4K w - - 3 25",
"r1b2rk1/p1q1ppbp/6p1/2Q5/8/4BP2/PPP3PP/2KR1B1R b - - 2 14",
"6r1/5k2/p1b1r2p/1pB1p1p1/1Pp3PP/2P1R1K1/2P2P2/3R4 w - - 1 36",
"rnbqkb1r/pppppppp/5n2/8/2PP4/8/PP2PPPP/RNBQKBNR b KQkq c3 0 2",
"2rr2k1/1p4bp/p1q1p1p1/4Pp1n/2PB4/1PN3P1/P3Q2P/2RR2K1 w - f6 0 20",
"3br1k1/p1pn3p/1p3n2/5pNq/2P1p3/1PN3PP/P2Q1PB1/4R1K1 w - - 0 23",
"2r2b2/5p2/5k2/p1r1pP2/P2pB3/1P3P2/K1P3R1/7R w - - 23 93"
];

//}}}

onmessage = function(e) {

  var uci = lozza.uci;

  uci.messageList = e.data.split('\n');

  for (var messageNum=0; messageNum < uci.messageList.length; messageNum++ ) {

    uci.message = uci.messageList[messageNum].replace(/(\r\n|\n|\r)/gm,"");
    uci.message = uci.message.trim();
    uci.message = uci.message.replace(/\s+/g,' ');

    uci.tokens  = uci.message.split(' ');
    uci.command = uci.tokens[0];

    if (!uci.command)
      continue;

    //{{{  shorthand
    
    if (uci.command == 'u')
      uci.command = 'ucinewgame';
    
    if (uci.command == 'q')
      uci.command = 'quit';
    
    if (uci.command == 'b')
      uci.command = 'board';
    
    if (uci.command == 'e')
      uci.command = 'eval';
    
    if (uci.command == 'q')
      uci.command = 'quit';
    
    if (uci.command == 'p') {
      uci.command = 'position';
      if (uci.tokens[1] == 's') {
        uci.tokens[1] = 'startpos';
      }
    }
    
    if (uci.command == 'g') {
      uci.command = 'go';
      if (uci.tokens[1] == 'd') {
        uci.tokens[1] = 'depth';
      }
    }
    
    //}}}

    switch (uci.command) {

    case 'position':
      //{{{  position
      
      uci.spec.board    = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR';
      uci.spec.turn     = 'w';
      uci.spec.rights   = 'KQkq';
      uci.spec.ep       = '-';
      uci.spec.hmc      = 0;
      uci.spec.fmc      = 1;
      uci.spec.id       = '';
      
      var arr = uci.getArr('fen','moves');
      
      if (arr.lo > 0) { // handle partial FENs
        if (arr.lo <= arr.hi) uci.spec.board  =          uci.tokens[arr.lo];  arr.lo++;
        if (arr.lo <= arr.hi) uci.spec.turn   =          uci.tokens[arr.lo];  arr.lo++;
        if (arr.lo <= arr.hi) uci.spec.rights =          uci.tokens[arr.lo];  arr.lo++;
        if (arr.lo <= arr.hi) uci.spec.ep     =          uci.tokens[arr.lo];  arr.lo++;
        if (arr.lo <= arr.hi) uci.spec.hmc    = parseInt(uci.tokens[arr.lo]); arr.lo++;
        if (arr.lo <= arr.hi) uci.spec.fmc    = parseInt(uci.tokens[arr.lo]); arr.lo++;
      }
      
      uci.spec.moves = [];
      
      var arr = uci.getArr('moves','fen');
      
      if (arr.lo > 0) {
        for (var i=arr.lo; i <= arr.hi; i++)
          uci.spec.moves.push(uci.tokens[i]);
      }
      
      lozza.position();
      
      break;
      
      //}}}

    case 'go':
      //{{{  go
      
      if (!uci.spec.board) {
        uci.send('info string send a position command first and a ucinewgame before that if you need to reset the hash');
        return;
      }
      
      lozza.stats.init();
      
      uci.spec.depth     = uci.getInt('depth',0);
      uci.spec.moveTime  = uci.getInt('movetime',0);
      uci.spec.maxNodes  = uci.getInt('nodes',0);
      uci.spec.wTime     = uci.getInt('wtime',0);
      uci.spec.bTime     = uci.getInt('btime',0);
      uci.spec.wInc      = uci.getInt('winc',0);
      uci.spec.bInc      = uci.getInt('binc',0);
      uci.spec.movesToGo = uci.getInt('movestogo',0);
      
      uci.numMoves++;
      
      lozza.go();
      
      break;
      
      //}}}

    case 'ucinewgame':
      //{{{  ucinewgame
      
      lozza.newGameInit();
      
      break;
      
      //}}}

    case 'quit':
      //{{{  quit
      
      if (lozzaHost == HOST_NODEJS)
        process.exit();
      else
        close();
      
      break;
      
      //}}}

    case 'stop':
      //{{{  stop
      //
      // This will have no effect. To stop an analysis or long move
      // the worker must be killed. It's just the way Javascript works.
      //
      
      lozza.stats.timeOut = 1;
      
      break;
      
      //}}}

    case 'debug':
      //{{{  debug
      
      if (uci.getStr('debug','off') == 'on')
        uci.debugging = true;
      else
        uci.debugging = false;
      
      break;
      
      //}}}

    case 'uci':
      //{{{  uci
      
      uci.send('id name Lozza',BUILD);
      uci.send('id author Colin Jenkins');
      uci.send('uciok');
      
      break;
      
      //}}}

    case 'isready':
      //{{{  isready
      
      uci.send('readyok');
      
      break;
      
      //}}}

    case 'setoption':
      //{{{  setoption
      
      var key = uci.getStr('name');
      var val = uci.getStr('value');
      
      uci.options[key] = val;
      
      break;
      
      //}}}

    case 'ping':
      //{{{  ping
      
      uci.send('info string Lozza build',BUILD,HOSTS[lozzaHost],'is alive');
      
      break;
      
      //}}}

    case 'id':
      //{{{  id
      
      uci.spec.id = uci.tokens[1];
      
      break;
      
      //}}}

    case 'perft':
      //{{{  perft
      
      uci.spec.depth = uci.getInt('depth',0);
      uci.spec.moves = uci.getInt('moves',0);
      uci.spec.inner = uci.getInt('inner',0);
      
      lozza.perft();
      
      break;
      
      //}}}

    case 'eval':
      //{{{  eval
      
      const e1 = lozza.board.netSlowEval(lozza.board.turn);
      const e2 = lozza.board.netFastEval(lozza.board.turn);
      
      if (lozzaHost == HOST_WEB)
        uci.send(e2);
      else
        uci.send('full',e1,'ue',e2);
      
      break;
      
      //}}}

    case 'board':
      //{{{  board
      
      uci.send('board',lozza.board.fen());
      
      break;
      
      //}}}

    case 'bench':
      //{{{  bench
      
      SILENT = 1;
      
      var nodes = 0;
      var time  = 0;
      
      for (var i=0; i < BENCHFENS.length; i++) {
      
        var fen = BENCHFENS[i];
      
        process.stdout.write(i.toString() + '\r');
        //SILENT = 0;
        //uci.send(fen);
        //SILENT = 1;
      
        docmd('ucinewgame');
        docmd('position fen ' + fen);
        docmd('id bench' + i);
        docmd('go depth ' + bench_depth);
      
        lozza.stats.stop();
      
        time  += lozza.stats.time;
        nodes += lozza.stats.nodes;
      }
      
      SILENT = 0;
      
      uci.send('nodes', nodes, 'time', time);
      
      break;
      
      //}}}

    case 'pt':
      //{{{  perft tests
      
      //{{{  perft fens
      
      const PERFTFENS = [
        ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 2, 400,       'cpw-pos1-2'],
        ['fen 4k3/8/8/8/8/8/R7/R3K2R                                  w Q    -  0 1', 3, 4729,      'castling-2'],
        ['fen 4k3/8/8/8/8/8/R7/R3K2R                                  w K    -  0 1', 3, 4686,      'castling-3'],
        ['fen 4k3/8/8/8/8/8/R7/R3K2R                                  w -    -  0 1', 3, 4522,      'castling-4'],
        ['fen r3k2r/r7/8/8/8/8/8/4K3                                  b kq   -  0 1', 3, 4893,      'castling-5'],
        ['fen r3k2r/r7/8/8/8/8/8/4K3                                  b q    -  0 1', 3, 4729,      'castling-6'],
        ['fen r3k2r/r7/8/8/8/8/8/4K3                                  b k    -  0 1', 3, 4686,      'castling-7'],
        ['fen r3k2r/r7/8/8/8/8/8/4K3                                  b -    -  0 1', 3, 4522,      'castling-8'],
        ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 0, 1,         'cpw-pos1-0'],
        ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 1, 20,        'cpw-pos1-1'],
        ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 3, 8902,      'cpw-pos1-3'],
        ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 4, 197281,    'cpw-pos1-4'],
        ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 5, 4865609,   'cpw-pos1-5'],
        ['fen rnbqkb1r/pp1p1ppp/2p5/4P3/2B5/8/PPP1NnPP/RNBQK2R        w KQkq -  0 1', 1, 42,        'cpw-pos5-1'],
        ['fen rnbqkb1r/pp1p1ppp/2p5/4P3/2B5/8/PPP1NnPP/RNBQK2R        w KQkq -  0 1', 2, 1352,      'cpw-pos5-2'],
        ['fen rnbqkb1r/pp1p1ppp/2p5/4P3/2B5/8/PPP1NnPP/RNBQK2R        w KQkq -  0 1', 3, 53392,     'cpw-pos5-3'],
        ['fen r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  0 1', 1, 48,        'cpw-pos2-1'],
        ['fen r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  0 1', 2, 2039,      'cpw-pos2-2'],
        ['fen r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  0 1', 3, 97862,     'cpw-pos2-3'],
        ['fen 8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8                         w -    -  0 1', 5, 674624,    'cpw-pos3-5'],
        ['fen n1n5/PPPk4/8/8/8/8/4Kppp/5N1N                           b -    -  0 1', 1, 24,        'prom-1    '],
        ['fen 8/5bk1/8/2Pp4/8/1K6/8/8                                 w -    d6 0 1', 6, 824064,    'ccc-1     '],
        ['fen 8/8/1k6/8/2pP4/8/5BK1/8                                 b -    d3 0 1', 6, 824064,    'ccc-2     '],
        ['fen 8/8/1k6/2b5/2pP4/8/5K2/8                                b -    d3 0 1', 6, 1440467,   'ccc-3     '],
        ['fen 8/5k2/8/2Pp4/2B5/1K6/8/8                                w -    d6 0 1', 6, 1440467,   'ccc-4     '],
        ['fen 5k2/8/8/8/8/8/8/4K2R                                    w K    -  0 1', 6, 661072,    'ccc-5     '],
        ['fen 4k2r/8/8/8/8/8/8/5K2                                    b k    -  0 1', 6, 661072,    'ccc-6     '],
        ['fen 3k4/8/8/8/8/8/8/R3K3                                    w Q    -  0 1', 6, 803711,    'ccc-7     '],
        ['fen r3k3/8/8/8/8/8/8/3K4                                    b q    -  0 1', 6, 803711,    'ccc-8     '],
        ['fen r3k2r/1b4bq/8/8/8/8/7B/R3K2R                            w KQkq -  0 1', 4, 1274206,   'ccc-9     '],
        ['fen r3k2r/7b/8/8/8/8/1B4BQ/R3K2R                            b KQkq -  0 1', 4, 1274206,   'ccc-10    '],
        ['fen r3k2r/8/3Q4/8/8/5q2/8/R3K2R                             b KQkq -  0 1', 4, 1720476,   'ccc-11    '],
        ['fen r3k2r/8/5Q2/8/8/3q4/8/R3K2R                             w KQkq -  0 1', 4, 1720476,   'ccc-12    '],
        ['fen 2K2r2/4P3/8/8/8/8/8/3k4                                 w -    -  0 1', 6, 3821001,   'ccc-13    '],
        ['fen 3K4/8/8/8/8/8/4p3/2k2R2                                 b -    -  0 1', 6, 3821001,   'ccc-14    '],
        ['fen 8/8/1P2K3/8/2n5/1q6/8/5k2                               b -    -  0 1', 5, 1004658,   'ccc-15    '],
        ['fen 5K2/8/1Q6/2N5/8/1p2k3/8/8                               w -    -  0 1', 5, 1004658,   'ccc-16    '],
        ['fen 4k3/1P6/8/8/8/8/K7/8                                    w -    -  0 1', 6, 217342,    'ccc-17    '],
        ['fen 8/k7/8/8/8/8/1p6/4K3                                    b -    -  0 1', 6, 217342,    'ccc-18    '],
        ['fen 8/P1k5/K7/8/8/8/8/8                                     w -    -  0 1', 6, 92683,     'ccc-19    '],
        ['fen 8/8/8/8/8/k7/p1K5/8                                     b -    -  0 1', 6, 92683,     'ccc-20    '],
        ['fen K1k5/8/P7/8/8/8/8/8                                     w -    -  0 1', 6, 2217,      'ccc-21    '],
        ['fen 8/8/8/8/8/p7/8/k1K5                                     b -    -  0 1', 6, 2217,      'ccc-22    '],
        ['fen 8/k1P5/8/1K6/8/8/8/8                                    w -    -  0 1', 7, 567584,    'ccc-23    '],
        ['fen 8/8/8/8/1k6/8/K1p5/8                                    b -    -  0 1', 7, 567584,    'ccc-24    '],
        ['fen 8/8/2k5/5q2/5n2/8/5K2/8                                 b -    -  0 1', 4, 23527,     'ccc-25    '],
        ['fen 8/5k2/8/5N2/5Q2/2K5/8/8                                 w -    -  0 1', 4, 23527,     'ccc-26    '],
        ['fen rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR             w KQkq -  0 1', 6, 119060324, 'cpw-pos1-6'],
        ['fen 8/p7/8/1P6/K1k3p1/6P1/7P/8                              w -    -  0 1', 8, 8103790,   'jvm-7     '],
        ['fen n1n5/PPPk4/8/8/8/8/4Kppp/5N1N                           b -    -  0 1', 6, 71179139,  'jvm-8     '],
        ['fen r3k2r/p6p/8/B7/1pp1p3/3b4/P6P/R3K2R                     w KQkq -  0 1', 6, 77054993,  'jvm-9     '],
        ['fen 8/5p2/8/2k3P1/p3K3/8/1P6/8                              b -    -  0 1', 8, 64451405,  'jvm-11    '],
        ['fen r3k2r/pb3p2/5npp/n2p4/1p1PPB2/6P1/P2N1PBP/R3K2R         w KQkq -  0 1', 5, 29179893,  'jvm-12    '],
        ['fen 8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8                         w -    -  0 1', 7, 178633661, 'jvm-10    '],
        ['fen r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  0 1', 5, 193690690, 'jvm-6     '],
        ['fen 8/2pkp3/8/RP3P1Q/6B1/8/2PPP3/rb1K1n1r                   w -    -  0 1', 6, 181153194, 'ob1       '],
        ['fen rnbqkb1r/ppppp1pp/7n/4Pp2/8/8/PPPP1PPP/RNBQKBNR         w KQkq f6 0 1', 6, 244063299, 'jvm-5     '],
        ['fen 8/2ppp3/8/RP1k1P1Q/8/8/2PPP3/rb1K1n1r                   w -    -  0 1', 6, 205552081, 'ob2       '],
        ['fen 8/8/3q4/4r3/1b3n2/8/3PPP2/2k1K2R                        w K    -  0 1', 6, 207139531, 'ob3       '],
        ['fen 4r2r/RP1kP1P1/3P1P2/8/8/3ppp2/1p4p1/4K2R                b K    -  0 1', 6, 314516438, 'ob4       '],
        ['fen r3k2r/8/8/8/3pPp2/8/8/R3K1RR                            b KQkq e3 0 1', 6, 485647607, 'jvm-1     '],
        ['fen 8/3K4/2p5/p2b2r1/5k2/8/8/1q6                            b -    -  0 1', 7, 493407574, 'jvm-4     '],
        ['fen r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1   w kq   -  0 1', 6, 706045033, 'jvm-2     '],
        ['fen r6r/1P4P1/2kPPP2/8/8/3ppp2/1p4p1/R3K2R                  w KQ   -  0 1', 6, 975944981, 'ob5       ']
      ];
      
      //}}}
      
      SILENT = 1;
      
      const t1 = now();
      
      for (var i=0; i < PERFTFENS.length; i++) {
      
        const p = PERFTFENS[i];
      
        const fen   = p[0];
        const depth = p[1];
        const moves = p[2];
        const id    = p[3];
      
        docmd('ucinewgame');
        docmd('position ' + fen);
        docmd('id ' + id);
        docmd('perft depth ' + depth + ' moves ' + moves + ' inner 0');
      
        SILENT = 0;
        uci.send(id,fen,depth,(lozza.stats.nodes - moves),lozza.stats.nodes,moves);
        SILENT = 1;
      }
      
      SILENT = 0;
      
      const t2  = now();
      const sec = Math.round((t2-t1)/100)/10;
      
      uci.send(sec, 'sec');
      
      break;
      
      //}}}

    case 'et':
      //{{{  eval tests
      
      for (let i=0; i < BENCHFENS.length; i++) {
      
        console.log();
      
        const fen = BENCHFENS[i];
      
        docmd('ucinewgame');
        docmd('position fen ' + fen);
        uci.send(fen, 'fen')
        docmd('e');
      
        const flippedFen = flipFen(fen);
      
        docmd('ucinewgame');
        docmd('position fen ' + flippedFen);
        uci.send(flippedFen, 'flipped fen')
        docmd('e');
      }
      
      break;
      
      //}}}

    case 'serialise':
      //{{{  serialise
      
      lozza.board.netSerialise();
      
      break;
      
      //}}}

    case 'network':
    case 'n':
      //{{{  network
      
      console.log('weights file', net_weights_file);
      console.log('i_size, h1_size', net_i_size, net_h1_size);
      console.log('qa, qb', net_quantise_a, net_quantise_b);
      console.log('scale', net_scale);
      
      docmd('u');
      docmd('p s');
      docmd('e');
      
      let w = [];
      
      let min = 999;
      let max = -999;
      for (let i=0; i < net_i_size; i++) {
        w = lozza.board.net_h1_w[i];
        for (let j=0; j < net_h1_size; j++) {
          min = Math.min(min,w[j]);
          max = Math.max(max,w[j]);
        }
      }
      console.log('h1_w min, max', min, max);
      
      min = 999;
      max = -999;
      w = lozza.board.net_h1_b;
      for (let j=0; j < net_h1_size; j++) {
        min = Math.min(min,w[j]);
        max = Math.max(max,w[j]);
      }
      console.log('h1_b min, max', min, max);
      
      min = 999;
      max = -999;
      w = lozza.board.net_o_w;
      for (let j=0; j < net_h1_size; j++) {
        min = Math.min(min,w[j]);
        max = Math.max(max,w[j]);
      }
      console.log('o_w min, max', min, max);
      
      console.log('o_b', lozza.board.net_o_b);
      
      break;
      
      //}}}

    default:
      //{{{  ?
      
      uci.send('info string','unknown command',uci.command);
      
      break;
      
      //}}}
    }
  }
}

//}}}

//}}}

//{{{  init

var lozza         = new lozChess();
lozza.board.lozza = lozza;

lozza.board.netLoad();
//}}}
